import React, { useState, useEffect, useCallback, useMemo } from 'react';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  FiUser, 
  FiMail, 
  FiPhone, 
  FiCalendar, 
  FiFileText, 
  FiEye, 
  FiDownload,
  FiSearch,
  FiFilter,
  FiCheck,
  FiX,
  FiStar,
  FiBriefcase,
  FiMapPin,
  FiClock,
  FiFile,
  FiMessageSquare,
  FiCode,
  FiGrid,
  FiList,
  FiBarChart2,
  FiCamera,
  FiGitBranch,
  FiArrowLeft,
  FiUsers
} from 'react-icons/fi';
import DetailedAnalysisModal from '../components/DetailedAnalysisModal';
import GithubSummaryPanel from './PortfolioSummary/GithubSummaryPanel';
import PortfolioSummaryPanel from './PortfolioSummary/PortfolioSummaryPanel';

// ÌèâÍ∑† Ï†êÏàò Í≥ÑÏÇ∞ Ìï®Ïàò
const calculateAverageScore = (analysisData) => {
  if (!analysisData || typeof analysisData !== 'object') return 0;
  
  const scores = Object.values(analysisData)
    .filter(item => item && typeof item === 'object' && 'score' in item)
    .map(item => item.score);
  
  if (scores.length === 0) return 0;
  
  const total = scores.reduce((sum, score) => sum + score, 0);
  return Math.round((total / scores.length) * 10) / 10; // ÏÜåÏàòÏ†ê Ï≤´Ïß∏ÏûêÎ¶¨ÍπåÏßÄ
};

// Ïù¥Î†•ÏÑú Î∂ÑÏÑù Ìï≠Î™© ÎùºÎ≤® Ìï®Ïàò
const getResumeAnalysisLabel = (key) => {
  const labels = {
    basic_info_completeness: 'Í∏∞Î≥∏Ï†ïÎ≥¥ ÏôÑÏÑ±ÎèÑ',
    job_relevance: 'ÏßÅÎ¨¥ Ï†ÅÌï©ÏÑ±',
    experience_clarity: 'Í≤ΩÎ†• Î™ÖÌôïÏÑ±',
    tech_stack_clarity: 'Í∏∞Ïà†Ïä§ÌÉù Î™ÖÌôïÏÑ±',
    project_recency: 'ÌîÑÎ°úÏ†ùÌä∏ ÏµúÏã†ÏÑ±',
    achievement_metrics: 'ÏÑ±Í≥º ÏßÄÌëú',
    readability: 'Í∞ÄÎèÖÏÑ±',
    typos_and_errors: 'Ïò§ÌÉàÏûê',
    update_freshness: 'ÏµúÏã†ÏÑ±'
  };
  return labels[key] || key;
};

// ÏûêÍ∏∞ÏÜåÍ∞úÏÑú Î∂ÑÏÑù Ìï≠Î™© ÎùºÎ≤® Ìï®Ïàò
const getCoverLetterAnalysisLabel = (key) => {
  const labels = {
    motivation_relevance: 'ÏßÄÏõê ÎèôÍ∏∞',
    problem_solving_STAR: 'STAR Í∏∞Î≤ï',
    quantitative_impact: 'Ï†ïÎüâÏ†Å ÏÑ±Í≥º',
    job_understanding: 'ÏßÅÎ¨¥ Ïù¥Ìï¥ÎèÑ',
    unique_experience: 'Ï∞®Î≥ÑÌôî Í≤ΩÌóò',
    logical_flow: 'ÎÖºÎ¶¨Ï†Å ÌùêÎ¶Ñ',
    keyword_diversity: 'ÌÇ§ÏõåÎìú Îã§ÏñëÏÑ±',
    sentence_readability: 'Î¨∏Ïû• Í∞ÄÎèÖÏÑ±',
    typos_and_errors: 'Ïò§ÌÉàÏûê'
  };
  return labels[key] || key;
};

// Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Î∂ÑÏÑù Ìï≠Î™© ÎùºÎ≤® Ìï®Ïàò
const getPortfolioAnalysisLabel = (key) => {
  const labels = {
    project_overview: 'ÌîÑÎ°úÏ†ùÌä∏ Í∞úÏöî',
    tech_stack: 'Í∏∞Ïà† Ïä§ÌÉù',
    personal_contribution: 'Í∞úÏù∏ Í∏∞Ïó¨ÎèÑ',
    achievement_metrics: 'ÏÑ±Í≥º ÏßÄÌëú',
    visual_quality: 'ÏãúÍ∞ÅÏ†Å ÌíàÏßà',
    documentation_quality: 'Î¨∏ÏÑúÌôî ÌíàÏßà',
    job_relevance: 'ÏßÅÎ¨¥ Í¥ÄÎ†®ÏÑ±',
    unique_features: 'ÎèÖÏ∞ΩÏ†Å Í∏∞Îä•',
    maintainability: 'Ïú†ÏßÄÎ≥¥ÏàòÏÑ±'
  };
  return labels[key] || key;
};

// API ÏÑúÎπÑÏä§ Ï∂îÍ∞Ä
const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';

const api = {
  // Î™®Îì† ÏßÄÏõêÏûê Ï°∞Ìöå (ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò ÏßÄÏõê)
  getAllApplicants: async (skip = 0, limit = 50, status = null, position = null) => {
    try {
      console.log('üîç API Ìò∏Ï∂ú ÏãúÎèÑ:', `${API_BASE_URL}/api/applicants`);
      
      const params = new URLSearchParams({
        skip: skip.toString(),
        limit: limit.toString()
      });
      
      if (status) params.append('status', status);
      if (position) params.append('position', position);
      
      const response = await fetch(`${API_BASE_URL}/api/applicants?${params}`);
      console.log('üì° ÏùëÎãµ ÏÉÅÌÉú:', response.status, response.statusText);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå API ÏùëÎãµ Ïò§Î•ò:', errorText);
        throw new Error(`ÏßÄÏõêÏûê Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®: ${response.status} ${response.statusText}`);
      }
      
      const data = await response.json();
      console.log('‚úÖ API ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:', data);
      return data.applicants || [];
    } catch (error) {
      console.error('‚ùå ÏßÄÏõêÏûê Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïò§Î•ò:', error);
      throw error;
    }
  },

  // ÏßÄÏõêÏûê ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
  updateApplicantStatus: async (applicantId, newStatus) => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/applicants/${applicantId}/status`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ status: newStatus })
      });
      if (!response.ok) {
        throw new Error('ÏßÄÏõêÏûê ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®');
      }
      return await response.json();
    } catch (error) {
      console.error('ÏßÄÏõêÏûê ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò:', error);
      throw error;
    }
  },

  // ÏßÄÏõêÏûê ÌÜµÍ≥Ñ Ï°∞Ìöå
  getApplicantStats: async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/applicants/stats/overview`);
      if (!response.ok) {
        throw new Error('ÏßÄÏõêÏûê ÌÜµÍ≥Ñ Ï°∞Ìöå Ïã§Ìå®');
      }
      return await response.json();
    } catch (error) {
      console.error('ÏßÄÏõêÏûê ÌÜµÍ≥Ñ Ï°∞Ìöå Ïò§Î•ò:', error);
      throw error;
    }
  },

  // Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
  getPortfolioByApplicantId: async (applicantId) => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/portfolios/applicant/${applicantId}`);
      if (!response.ok) {
        throw new Error('Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®');
      }
      return await response.json();
    } catch (error) {
      console.error('Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïò§Î•ò:', error);
      throw error;
    }
  }
};

const Container = styled.div`
  padding: 24px;
  max-width: 1200px;
  margin: 0 auto;
`;

const Header = styled.div`
  margin-bottom: 32px;
`;

const HeaderContent = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
`;

const HeaderLeft = styled.div`
  flex: 1;
`;

const HeaderRight = styled.div`
  display: flex;
  align-items: center;
`;

const NewResumeButton = styled.button`
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 12px 20px;
  background: var(--primary-color);
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 14px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  
  &:hover {
    background: var(--primary-dark);
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  }
  
  &:active {
    transform: translateY(0);
  }
`;

const Title = styled.h1`
  font-size: 28px;
  font-weight: 700;
  color: var(--text-primary);
  margin-bottom: 8px;
`;

const Subtitle = styled.p`
  color: var(--text-secondary);
  font-size: 16px;
`;

const LoadingIndicator = styled.div`
  display: flex;
  align-items: center;
  gap: 8px;
  color: var(--primary-color);
  font-size: 14px;
  font-weight: 500;
  margin-top: 8px;
`;

const StatsGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 24px;
  margin-bottom: 32px;
`;

const StatCard = styled(motion.div)`
  background: white;
  border-radius: 12px;
  padding: 24px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  border: 1px solid var(--border-color);
`;

const StatValue = styled(motion.div)`
  font-size: 32px;
  font-weight: 700;
  color: var(--primary-color);
  margin-bottom: 8px;
`;

const StatLabel = styled.div`
  color: var(--text-secondary);
  font-size: 14px;
`;

const SearchBar = styled.div`
  display: flex;
  gap: 16px;
  margin-bottom: 24px;
  align-items: center;
  justify-content: space-between;
`;

const SearchSection = styled.div`
  display: flex;
  gap: 16px;
  align-items: center;
  flex: 1;
`;

const ViewModeSection = styled.div`
  display: flex;
  gap: 8px;
`;

const ViewModeButton = styled.button`
  padding: 8px 12px;
  background: ${props => props.active ? 'var(--primary-color)' : 'white'};
  color: ${props => props.active ? 'white' : 'var(--text-secondary)'};
  border: 1px solid var(--border-color);
  border-radius: 6px;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 4px;
  font-size: 12px;
  transition: all 0.2s;
  
  &:hover {
    border-color: var(--primary-color);
    color: ${props => props.active ? 'white' : 'var(--primary-color)'};
  }
`;

// Ìó§Îçî Ïä§ÌÉÄÏùº Ïª¥Ìè¨ÎÑåÌä∏Îì§
const HeaderRow = styled.div`
  display: flex;
  align-items: center;
  padding: 12px 16px;
  background: var(--background-secondary);
  border-radius: 8px;
  margin-bottom: 16px;
  font-weight: 600;
  font-size: 14px;
  color: var(--text-secondary);
  border: 1px solid var(--border-color);
`;

const HeaderRowBoard = styled.div`
  display: flex;
  align-items: center;
  padding: 8px 16px;
  background: var(--background-secondary);
  border-radius: 8px;
  margin-bottom: 12px;
  font-weight: 600;
  font-size: 11px;
  color: var(--text-secondary);
  border: 1px solid var(--border-color);
  height: 36px;
  gap: 16px;
`;

const HeaderAvatar = styled.div`
  width: 28px;
  flex-shrink: 0;
`;

const HeaderName = styled.div`
  min-width: 90px;
  flex-shrink: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 12px;
`;

const HeaderPosition = styled.div`
  min-width: 110px;
  flex-shrink: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 12px;
`;

const HeaderDate = styled.div`
  min-width: 80px;
  flex-shrink: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  font-size: 12px;
`;

const HeaderEmail = styled.div`
  min-width: 160px;
  flex-shrink: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 12px;
`;

const HeaderPhone = styled.div`
  min-width: 110px;
  flex-shrink: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 12px;
`;

const HeaderSkills = styled.div`
  min-width: 140px;
  flex-shrink: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 12px;
`;

const HeaderActions = styled.div`
  min-width: 100px;
  flex-shrink: 0;
  text-align: center;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 12px;
`;

const HeaderRanks = styled.div`
  min-width: 120px;
  flex-shrink: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  font-size: 12px;
`;

const HeaderCheckbox = styled.div`
  min-width: 32px;
  flex-shrink: 0;
  display: flex;
  align-items: center;
  justify-content: center;
`;

const ApplicantCheckbox = styled.div`
  min-width: 40px;
  flex-shrink: 0;
  display: flex;
  align-items: center;
  justify-content: center;
`;

const CheckboxInput = styled.input`
  width: 16px;
  height: 16px;
  accent-color: var(--primary-color);
  cursor: pointer;
`;

const FixedActionBar = styled.div`
  position: sticky;
  top: 0;
  background: var(--background-secondary);
  padding: 12px 24px;
  margin: 0 -24px 16px -24px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  z-index: 100;
`;

const ActionButtonsGroup = styled.div`
  display: flex;
  gap: 8px;
`;

const FixedActionButton = styled.button`
  padding: 8px 16px;
  border: 1px solid var(--border-color);
  border-radius: 6px;
  background: white;
  color: var(--text-secondary);
  font-size: 12px;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 4px;
  transition: all 0.2s;
  
  &:hover {
    border-color: var(--primary-color);
    color: var(--primary-color);
  }
`;

const FixedPassButton = styled(FixedActionButton)`
  background: ${props => props.active ? '#28a745' : 'white'};
  color: ${props => props.active ? 'white' : '#28a745'};
  border-color: #28a745;
  
  &:hover {
    background: ${props => props.active ? '#218838' : '#28a745'};
    border-color: ${props => props.active ? '#1e7e34' : '#28a745'};
    color: ${props => props.active ? 'white' : 'white'};
  }
`;

const FixedPendingButton = styled(FixedActionButton)`
  background: ${props => props.active ? '#ffc107' : 'white'};
  color: ${props => props.active ? '#212529' : '#ffc107'};
  border-color: #ffc107;
  
  &:hover {
    background: ${props => props.active ? '#e0a800' : '#ffc107'};
    border-color: ${props => props.active ? '#d39e00' : '#ffc107'};
    color: ${props => props.active ? '#212529' : '#212529'};
  }
`;

const FixedRejectButton = styled(FixedActionButton)`
  background: ${props => props.active ? '#dc3545' : 'white'};
  color: ${props => props.active ? 'white' : '#dc3545'};
  border-color: #dc3545;
  
  &:hover {
    background: ${props => props.active ? '#c82333' : '#dc3545'};
    border-color: ${props => props.active ? '#bd2130' : '#dc3545'};
    color: ${props => props.active ? 'white' : 'white'};
  }
`;

const SelectionInfo = styled.div`
  font-size: 12px;
  color: var(--text-secondary);
  display: flex;
  align-items: center;
  gap: 8px;
`;

const SearchInput = styled.input`
  flex: 1;
  padding: 12px 16px;
  border: 1px solid var(--border-color);
  border-radius: 8px;
  font-size: 14px;
  outline: none;
  
  &:focus {
    border-color: var(--primary-color);
  }
`;

// ÎàÑÎùΩÎêú Ïä§ÌÉÄÏùº Ïª¥Ìè¨ÎÑåÌä∏Îì§ Ï∂îÍ∞Ä
const CardHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 12px;
`;

const CardContent = styled.div`
  margin-bottom: 12px;
`;

const InfoRow = styled.div`
  display: flex;
  align-items: center;
  gap: 8px;
  margin-bottom: 6px;
  font-size: 14px;
  color: var(--text-secondary);
`;

const CardActions = styled.div`
  display: flex;
  gap: 8px;
  margin-top: 12px;
`;

const LoadingOverlay = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
`;

const LoadingSpinner = styled.div`
  background: white;
  padding: 24px;
  border-radius: 12px;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 12px;
  
  .spinner {
    width: 32px;
    height: 32px;
    border: 3px solid #f3f3f3;
    border-top: 3px solid var(--primary-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
`;

const LoadMoreButton = styled.button`
  width: 100%;
  padding: 16px;
  background: var(--primary-color);
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  margin-top: 24px;
  transition: all 0.2s;
  
  &:hover {
    background: var(--primary-dark);
    transform: translateY(-1px);
  }
`;

const EndMessage = styled.div`
  text-align: center;
  padding: 24px;
  color: var(--text-secondary);
  font-size: 14px;
  margin-top: 24px;
`;

// ÏÉà Ïù¥Î†•ÏÑú Îì±Î°ù Î™®Îã¨ Ïä§ÌÉÄÏùº Ïª¥Ìè¨ÎÑåÌä∏Îì§
const ResumeModalOverlay = styled(motion.div)`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
`;

const ResumeModalContent = styled(motion.div)`
  background: white;
  border-radius: 12px;
  width: 90%;
  max-width: 600px;
  max-height: 90vh;
  overflow-y: auto;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
`;

const ResumeModalHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 24px 24px 0 24px;
  border-bottom: 1px solid var(--border-color);
`;

const ResumeModalTitle = styled.h2`
  font-size: 20px;
  font-weight: 600;
  color: var(--text-primary);
  margin: 0;
`;

const ResumeModalCloseButton = styled.button`
  background: none;
  border: none;
  font-size: 24px;
  color: var(--text-secondary);
  cursor: pointer;
  padding: 0;
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  transition: all 0.2s;
  
  &:hover {
    background: var(--background-secondary);
    color: var(--text-primary);
  }
`;

const ResumeModalBody = styled.div`
  padding: 24px;
`;

const ResumeFormSection = styled.div`
  margin-bottom: 24px;
`;

const ResumeFormTitle = styled.h3`
  font-size: 16px;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 12px;
`;

const ResumeFormDescription = styled.p`
  font-size: 14px;
  color: var(--text-secondary);
  margin-bottom: 16px;
  line-height: 1.5;
`;

const FileUploadArea = styled.div`
  border: 2px dashed ${props => props.isDragOver ? 'var(--primary-color)' : 'var(--border-color)'};
  border-radius: 8px;
  padding: 24px;
  text-align: center;
  transition: all 0.2s;
  background: ${props => props.isDragOver ? 'rgba(0, 200, 81, 0.1)' : 'transparent'};
  
  &:hover {
    border-color: var(--primary-color);
    background: var(--background-secondary);
  }
`;

const FileUploadInput = styled.input`
  display: none;
`;

const FileUploadLabel = styled.label`
  cursor: pointer;
  display: block;
`;

const FileUploadPlaceholder = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 8px;
  color: var(--text-secondary);
  
  span {
    font-size: 16px;
    font-weight: 500;
  }
  
  small {
    font-size: 12px;
    color: var(--text-light);
  }
`;

const FileSelected = styled.div`
  display: flex;
  align-items: center;
  gap: 8px;
  color: var(--primary-color);
  font-weight: 500;
`;

const ResumeFormGrid = styled.div`
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 16px;
`;

const ResumeFormField = styled.div`
  display: flex;
  flex-direction: column;
  gap: 6px;
`;

const ResumeFormLabel = styled.label`
  font-size: 14px;
  font-weight: 500;
  color: var(--text-primary);
`;

const ResumeFormInput = styled.input`
  padding: 12px;
  border: 1px solid var(--border-color);
  border-radius: 6px;
  font-size: 14px;
  outline: none;
  transition: all 0.2s;
  
  &:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }
  
  &::placeholder {
    color: var(--text-light);
  }
`;

// Î¨∏ÏÑú ÏóÖÎ°úÎìú Í¥ÄÎ†® Ïä§ÌÉÄÏùº Ïª¥Ìè¨ÎÑåÌä∏Îì§
const DocumentUploadContainer = styled.div`
  display: flex;
  flex-direction: column;
  gap: 16px;
`;

const DocumentTypeSection = styled.div`
  display: flex;
  flex-direction: column;
  gap: 8px;
`;

const DocumentTypeLabel = styled.label`
  font-size: 14px;
  font-weight: 500;
  color: var(--text-primary);
`;

const DocumentTypeSelect = styled.select`
  padding: 12px;
  border: 1px solid var(--border-color);
  border-radius: 6px;
  font-size: 14px;
  outline: none;
  background: white;
  cursor: pointer;
  transition: all 0.2s;
  
  &:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }
  
  option {
    padding: 8px;
  }
`;

const ResumeModalFooter = styled.div`
  display: flex;
  justify-content: flex-end;
  gap: 12px;
  padding: 24px;
  border-top: 1px solid var(--border-color);
`;

const ResumeModalButton = styled.button`
  padding: 12px 24px;
  background: white;
  color: var(--text-primary);
  border: 1px solid var(--border-color);
  border-radius: 6px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
  
  &:hover {
    background: var(--background-secondary);
    border-color: var(--text-secondary);
  }
`;

const ResumeModalSubmitButton = styled.button`
  padding: 12px 24px;
  background: var(--primary-color);
  color: white;
  border: none;
  border-radius: 6px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
  
  &:hover {
    background: var(--primary-dark);
  }
  
  &:disabled {
    background: var(--text-light);
    cursor: not-allowed;
  }
`;

// Î∂ÑÏÑù Í≤∞Í≥º Ïä§ÌÉÄÏùº Ïª¥Ìè¨ÎÑåÌä∏Îì§
const ResumeAnalysisSection = styled.div`
  margin-top: 24px;
  padding: 20px;
  background: var(--background-secondary);
  border-radius: 8px;
  border: 1px solid var(--border-color);
`;

const ResumeAnalysisTitle = styled.h3`
  font-size: 16px;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 16px;
`;

const ResumeAnalysisSpinner = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 12px;
  padding: 20px;
  
  .spinner {
    width: 32px;
    height: 32px;
    border: 3px solid #f3f3f3;
    border-top: 3px solid var(--primary-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  span {
    color: var(--text-secondary);
    font-size: 14px;
  }
`;

const ResumeAnalysisContent = styled.div`
  display: flex;
  flex-direction: column;
  gap: 12px;
`;

const ResumeAnalysisItem = styled.div`
  display: flex;
  align-items: flex-start;
  gap: 12px;
`;

const ResumeAnalysisLabel = styled.span`
  font-size: 14px;
  font-weight: 500;
  color: var(--text-primary);
  min-width: 80px;
`;

const ResumeAnalysisValue = styled.span`
  font-size: 14px;
  color: var(--text-secondary);
  flex: 1;
`;

const ResumeAnalysisScore = styled.span`
  font-size: 16px;
  font-weight: 600;
  color: ${props => {
    if (props.score >= 90) return '#28a745';
    if (props.score >= 80) return '#ffc107';
    return '#dc3545';
  }};
`;

const AnalysisScoreDisplay = styled.div`
  display: flex;
  align-items: center;
  gap: 12px;
  margin: 16px 0;
  padding: 16px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border-radius: 8px;
  color: white;
`;

const AnalysisScoreCircle = styled.div`
  width: 50px;
  height: 50px;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.2);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 18px;
  font-weight: 700;
`;

const AnalysisScoreInfo = styled.div`
  flex: 1;
`;

const AnalysisScoreLabel = styled.div`
  font-size: 14px;
  opacity: 0.9;
  margin-bottom: 4px;
`;

const AnalysisScoreValue = styled.div`
  font-size: 20px;
  font-weight: 700;
`;

const ResumeAnalysisSkills = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 6px;
  flex: 1;
`;

const ResumeSkillTag = styled.span`
  padding: 4px 8px;
  background: var(--primary-color);
  color: white;
  border-radius: 12px;
  font-size: 12px;
  font-weight: 500;
`;

const ResumeAnalysisRecommendations = styled.div`
  display: flex;
  flex-direction: column;
  gap: 4px;
  flex: 1;
`;

const ResumeRecommendationItem = styled.div`
  font-size: 14px;
  color: var(--text-secondary);
  line-height: 1.4;
`;

const DetailedAnalysisButton = styled.button`
  display: flex;
  align-items: center;
  gap: 8px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 6px;
  font-size: 13px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s;

  &:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
  }
`;

const FilterButton = styled.button`
  padding: 12px 16px;
  background: ${props => props.hasActiveFilters ? 'var(--primary-color)' : 'white'};
  color: ${props => props.hasActiveFilters ? 'white' : 'var(--text-primary)'};
  border: 1px solid ${props => props.hasActiveFilters ? 'var(--primary-color)' : 'var(--border-color)'};
  border-radius: 8px;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 14px;
  transition: all 0.2s;
  
  &:hover {
    border-color: var(--primary-color);
    color: var(--primary-color);
    background: ${props => props.hasActiveFilters ? 'var(--primary-dark)' : 'white'};
  }
`;

const FilterBadge = styled.span`
  background: ${props => props.hasActiveFilters ? 'white' : 'var(--primary-color)'};
  color: ${props => props.hasActiveFilters ? 'var(--primary-color)' : 'white'};
  border-radius: 50%;
  width: 18px;
  height: 18px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 10px;
  font-weight: 600;
`;

// ÌïÑÌÑ∞ Î™®Îã¨ Ïä§ÌÉÄÏùº
const FilterModalOverlay = styled(motion.div)`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1500;
  padding: 20px;
`;

const FilterModalContent = styled(motion.div)`
  background: white;
  border-radius: 16px;
  padding: 32px;
  max-width: 600px;
  width: 100%;
  position: relative;
`;

const FilterModalHeader = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 24px;
  padding-bottom: 16px;
  border-bottom: 1px solid var(--border-color);
`;

const FilterModalTitle = styled.h2`
  font-size: 24px;
  font-weight: 700;
  color: var(--text-primary);
`;

const FilterCloseButton = styled.button`
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  color: var(--text-secondary);
  padding: 4px;
  border-radius: 4px;
  transition: all 0.2s;
  
  &:hover {
    background: var(--background-secondary);
    color: var(--text-primary);
  }
`;

const FilterSection = styled.div`
  margin-bottom: 24px;
`;

const FilterSectionTitle = styled.h3`
  font-size: 18px;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 16px;
`;

const FilterGrid = styled.div`
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 24px;
`;

const FilterColumn = styled.div``;

const CheckboxGroup = styled.div`
  display: flex;
  flex-direction: column;
  gap: 12px;
`;

const CheckboxItem = styled.label`
  display: flex;
  align-items: center;
  gap: 8px;
  cursor: pointer;
  font-size: 14px;
  color: var(--text-primary);
  
  &:hover {
    color: var(--primary-color);
  }
`;

const Checkbox = styled.input`
  width: 16px;
  height: 16px;
  accent-color: var(--primary-color);
`;

const ApplyButton = styled.button`
  background: linear-gradient(135deg, var(--primary-color), #00a844);
  color: white;
  border: none;
  border-radius: 8px;
  padding: 12px 24px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
  
  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }
`;

const ResetButton = styled.button`
  background: #f3f4f6;
  color: #374151;
  border: 1px solid #d1d5db;
  border-radius: 8px;
  padding: 12px 24px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
  
  &:hover {
    background: #e5e7eb;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
`;

const FilterButtonGroup = styled.div`
  display: flex;
  gap: 12px;
  margin-top: 24px;
  
  ${ApplyButton}, ${ResetButton} {
    flex: 1;
  }
`;

const NoResultsMessage = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 60px 20px;
  text-align: center;
  color: var(--text-secondary);
  
  h3 {
    margin: 16px 0 8px 0;
    font-size: 18px;
    font-weight: 600;
    color: var(--text-primary);
  }
  
  p {
    margin: 0;
    font-size: 14px;
    color: var(--text-secondary);
  }
`;

const ApplicantsGrid = styled.div`
  display: grid;
  grid-template-columns: ${props => props.viewMode === 'grid' ? 'repeat(auto-fill, minmax(350px, 1fr))' : '1fr'};
  gap: ${props => props.viewMode === 'grid' ? '24px' : '16px'};
`;

const ApplicantsBoard = styled.div`
  display: flex;
  flex-direction: column;
  gap: 16px;
`;

const ApplicantCard = styled(motion.div)`
  background: white;
  border-radius: 12px;
  padding: ${props => props.viewMode === 'grid' ? '24px' : '20px'};
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  border: 1px solid var(--border-color);
  cursor: pointer;
  transition: all 0.2s;
  
  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
  }
`;

const ApplicantCardBoard = styled(motion.div)`
  background: white;
  border-radius: 12px;
  padding: 16px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  border: 1px solid var(--border-color);
  cursor: pointer;
  transition: all 0.2s;
  height: 56px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  
  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
  }
`;

const ApplicantHeader = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 16px;
`;

const ApplicantHeaderBoard = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 16px;
`;

const ApplicantInfo = styled.div`
  display: flex;
  align-items: center;
  gap: 12px;
`;

const ApplicantInfoBoard = styled.div`
  display: flex;
  align-items: center;
  gap: 12px;
  flex: 1;
  min-width: 0;
`;

const Avatar = styled.div`
  width: 48px;
  height: 48px;
  border-radius: 50%;
  background: linear-gradient(135deg, var(--primary-color), #00a844);
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: 600;
  font-size: 18px;
`;

const AvatarBoard = styled.div`
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background: linear-gradient(135deg, var(--primary-color), #00a844);
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: 600;
  font-size: 14px;
`;

const AiSuitabilityAvatarBoard = styled.div`
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background: ${props => {
    if (props.percentage >= 90) return 'linear-gradient(135deg, #22c55e, #16a34a)';
    if (props.percentage >= 80) return 'linear-gradient(135deg, #eab308, #ca8a04)';
    return 'linear-gradient(135deg, #ef4444, #dc2626)';
  }};
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: 600;
  font-size: 10px;
  text-align: center;
  line-height: 1;
`;

const ApplicantDetails = styled.div`
  flex: 1;
`;

const ApplicantDetailsBoard = styled.div`
  display: flex;
  align-items: center;
  gap: 0;
  flex: 1;
  min-width: 0;
  overflow: hidden;
`;

const ApplicantName = styled.h3`
  font-size: 16px;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 4px;
`;

const ApplicantNameBoard = styled.h3`
  font-size: 14px;
  font-weight: 600;
  color: var(--text-primary);
  min-width: 90px;
  text-align: center;
  display: flex;
  align-items: center;
  justify-content: center;
`;

const ApplicantPosition = styled.p`
  color: var(--text-secondary);
  font-size: 14px;
  margin-bottom: 4px;
`;

const ApplicantPositionBoard = styled.p`
  color: var(--text-secondary);
  font-size: 12px;
  min-width: 110px;
  text-align: center;
  display: flex;
  align-items: center;
  justify-content: center;
`;

const ApplicantDate = styled.p`
  color: var(--text-light);
  font-size: 12px;
`;

const ApplicantDateBoard = styled.p`
  color: var(--text-light);
  font-size: 11px;
  min-width: 80px;
  text-align: center;
  display: flex;
  align-items: center;
  justify-content: center;
  white-space: nowrap;
`;

const ApplicantEmailBoard = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  min-width: 160px;
  flex-shrink: 0;
`;

const ApplicantPhoneBoard = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  min-width: 110px;
  flex-shrink: 0;
`;

const ContactItem = styled.div`
  display: flex;
  align-items: center;
  gap: 3px;
  font-size: 10px;
  color: var(--text-secondary);
  justify-content: center;
`;

const ApplicantSkillsBoard = styled.div`
  display: flex;
  align-items: center;
  gap: 20px;
  min-width: 150px;
  justify-content: center;
`;

const SkillTagBoard = styled.span`
  padding: 1px 4px;
  background: var(--background-secondary);
  border-radius: 4px;
  font-size: 9px;
  color: var(--text-secondary);
`;

const ApplicantActions = styled.div`
  display: flex;
  gap: 8px;
  margin-top: 16px;
  padding-top: 16px;
  border-top: 1px solid var(--border-color);
  opacity: 1;
  transition: opacity 0.2s ease;
`;

const ApplicantActionsBoard = styled.div`
  display: flex;
  gap: 6px;
  flex-wrap: wrap;
  justify-content: center;
  opacity: 1;
  transition: opacity 0.2s ease;
  margin-top: 8px;
`;

const StatusBadge = styled(motion.span)`
  padding: 4px 12px;
  border-radius: 20px;
  font-size: 12px;
  font-weight: 500;
  text-align: center;
  background: ${props => {
    switch (props.status) {
      case 'ÏÑúÎ•òÌï©Í≤©': return '#e8f5e8';
      case 'ÏÑúÎ•òÎ∂àÌï©Í≤©': return '#ffe8e8';
      case 'Î©¥Ï†ëÎåÄÍ∏∞': return '#fff3cd';
      case 'ÏµúÏ¢ÖÌï©Í≤©': return '#d1ecf1';
      case 'Î≥¥Î•ò': return '#fff8dc';
      default: return '#f8f9fa';
    }
  }};
  color: ${props => {
    switch (props.status) {
      case 'ÏÑúÎ•òÌï©Í≤©': return '#28a745';
      case 'ÏÑúÎ•òÎ∂àÌï©Í≤©': return '#dc3545';
      case 'Î©¥Ï†ëÎåÄÍ∏∞': return '#856404';
      case 'ÏµúÏ¢ÖÌï©Í≤©': return '#0c5460';
      case 'Î≥¥Î•ò': return '#856404';
      default: return '#6c757d';
    }
  }};
`;

const StatusColumnWrapper = styled.div`
  min-width: 200px;
  flex-shrink: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  white-space: nowrap;
`;

const ActionButton = styled.button`
  padding: 6px 10px;
  border: 1px solid var(--border-color);
  border-radius: 6px;
  background: white;
  color: var(--text-secondary);
  font-size: 11px;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 4px;
  transition: all 0.2s;
  
  &:hover {
    border-color: var(--primary-color);
    color: var(--primary-color);
  }
`;

const PassButton = styled(ActionButton)`
  background: ${props => props.active ? '#28a745' : 'white'};
  color: ${props => props.active ? 'white' : '#28a745'};
  border-color: #28a745;
  
  &:hover {
    background: ${props => props.active ? '#218838' : '#28a745'};
    border-color: ${props => props.active ? '#1e7e34' : '#28a745'};
    color: ${props => props.active ? 'white' : 'white'};
  }
`;

const PendingButton = styled(ActionButton)`
  background: ${props => props.active ? '#ffc107' : 'white'};
  color: ${props => props.active ? '#212529' : '#ffc107'};
  border-color: #ffc107;
  
  &:hover {
    background: ${props => props.active ? '#e0a800' : '#ffc107'};
    border-color: ${props => props.active ? '#d39e00' : '#ffc107'};
    color: ${props => props.active ? '#212529' : '#212529'};
  }
`;

const RejectButton = styled(ActionButton)`
  background: ${props => props.active ? '#dc3545' : 'white'};
  color: ${props => props.active ? 'white' : '#dc3545'};
  border-color: #dc3545;
  
  &:hover {
    background: ${props => props.active ? '#c82333' : '#dc3545'};
    border-color: ${props => props.active ? '#bd2130' : '#dc3545'};
    color: ${props => props.active ? 'white' : 'white'};
  }
`;

const EmptyState = styled.div`
  text-align: center;
  padding: 48px;
  color: var(--text-secondary);
`;

// Î™®Îã¨ Ïä§ÌÉÄÏùº
const ModalOverlay = styled(motion.div)`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  padding: 20px;
`;

const ModalContent = styled(motion.div)`
  background: white;
  border-radius: 16px;
  padding: 32px;
  max-width: 600px;
  width: 100%;
  max-height: 80vh;
  overflow-y: auto;
  position: relative;
`;

const ModalHeader = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 24px;
  padding-bottom: 16px;
  border-bottom: 1px solid var(--border-color);
`;

const ModalTitle = styled.h2`
  font-size: 24px;
  font-weight: 700;
  color: var(--text-primary);
`;

const CloseButton = styled.button`
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  color: var(--text-secondary);
  padding: 4px;
  border-radius: 4px;
  transition: all 0.2s;
  
  &:hover {
    background: var(--background-secondary);
    color: var(--text-primary);
  }
`;

const ProfileSection = styled.div`
  margin-bottom: 24px;
`;

const SectionTitle = styled.h3`
  font-size: 16px;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 12px;
  display: flex;
  align-items: center;
  gap: 8px;
`;

const ProfileGrid = styled.div`
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 16px;
`;

const ProfileItem = styled.div`
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 12px;
  background: var(--background-secondary);
  border-radius: 8px;
`;

const ProfileLabel = styled.span`
  font-size: 14px;
  color: var(--text-secondary);
  min-width: 80px;
`;

const ProfileValue = styled.span`
  font-size: 14px;
  color: var(--text-primary);
  font-weight: 500;
`;

const SummarySection = styled.div`
  background: linear-gradient(135deg, #f8f9fa, #e9ecef);
  border-radius: 12px;
  padding: 20px;
  margin-top: 24px;
`;

const SummaryTitle = styled.h3`
  font-size: 16px;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 12px;
  display: flex;
  align-items: center;
  gap: 8px;
`;

const SummaryText = styled.p`
  font-size: 14px;
  color: var(--text-secondary);
  line-height: 1.6;
  background: white;
  padding: 16px;
  border-radius: 8px;
  border-left: 4px solid var(--primary-color);
`;

const DocumentButtons = styled.div`
  display: flex;
  justify-content: center;
  gap: 16px;
  margin-top: 50px;
`;

const DocumentButton = styled.button`
  padding: 12px 24px;
  background: linear-gradient(135deg, var(--primary-color), #00a844);
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
  display: flex;
  align-items: center;
  gap: 8px;
  
  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }
`;

// Î¨∏ÏÑú Î™®Îã¨ Ïä§ÌÉÄÏùº
const DocumentModalOverlay = styled(motion.div)`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 2000;
  padding: 20px;
`;

const DocumentModalContent = styled(motion.div)`
  background: white;
  border-radius: 16px;
  padding: 32px;
  max-width: 800px;
  width: 100%;
  max-height: 90vh;
  overflow-y: auto;
  position: relative;
`;

const DocumentModalHeader = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 24px;
  padding-bottom: 16px;
  border-bottom: 1px solid var(--border-color);
`;

const DocumentModalTitle = styled.h2`
  font-size: 24px;
  font-weight: 700;
  color: var(--text-primary);
`;

// Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Î∑∞ ÏÑ†ÌÉù UI Ïä§ÌÉÄÏùº
const SelectionGrid = styled.div`
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
  margin-top: 8px;

  @media (max-width: 768px) {
    grid-template-columns: 1fr;
  }
`;

const SelectionCard = styled(motion.div)`
  border: 2px solid var(--border-color);
  border-radius: 12px;
  padding: 24px;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  background: white;

  &:hover {
    border-color: var(--primary-color);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 200, 81, 0.1);
  }
`;

const SelectionIcon = styled.div`
  width: 56px;
  height: 56px;
  border-radius: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 16px;
  font-size: 22px;
  color: white;

  &.github {
    background: linear-gradient(135deg, #24292e, #57606a);
  }

  &.portfolio {
    background: linear-gradient(135deg, #667eea, #764ba2);
  }
`;

const SelectionTitle = styled.h3`
  font-size: 18px;
  font-weight: 600;
  color: var(--text-primary);
  margin: 0 0 8px 0;
`;

const SelectionDesc = styled.p`
  font-size: 14px;
  color: var(--text-secondary);
  margin: 0;
`;

const DocumentCloseButton = styled.button`
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  color: var(--text-secondary);
  padding: 4px;
  border-radius: 4px;
  transition: all 0.2s;
  
  &:hover {
    background: var(--background-secondary);
    color: var(--text-primary);
  }
`;

const DocumentHeaderActions = styled.div`
  display: flex;
  align-items: center;
  gap: 12px;
`;

const DocumentOriginalButton = styled.button`
  background: var(--primary-color);
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 8px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
  display: flex;
  align-items: center;
  gap: 6px;
  
  &:hover {
    background: var(--primary-dark);
    transform: translateY(-1px);
  }
  
  &:active {
    transform: translateY(0);
  }
`;

const DocumentContent = styled.div`
  line-height: 1.8;
  color: var(--text-primary);
`;

const DocumentSection = styled.div`
  margin-bottom: 24px;
`;

const DocumentSectionTitle = styled.h3`
  font-size: 18px;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 12px;
  padding-bottom: 8px;
  border-bottom: 2px solid var(--primary-color);
`;

const DocumentText = styled.p`
  font-size: 14px;
  color: var(--text-secondary);
  margin-bottom: 16px;
  text-align: justify;
`;

const DocumentList = styled.ul`
  margin: 16px 0;
  padding-left: 20px;
`;

const DocumentListItem = styled.li`
  font-size: 14px;
  color: var(--text-secondary);
  margin-bottom: 8px;
  line-height: 1.6;
`;

const DocumentGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 16px;
  margin: 16px 0;
`;

const DocumentCard = styled.div`
  background: var(--background-secondary);
  padding: 16px;
  border-radius: 8px;
  border-left: 4px solid var(--primary-color);
`;

const DocumentCardTitle = styled.h4`
  font-size: 14px;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 8px;
`;

const DocumentCardText = styled.p`
  font-size: 12px;
  color: var(--text-secondary);
  line-height: 1.5;
`;

const SkillsSection = styled.div`
  margin-top: 24px;
`;

const SkillsTitle = styled.h3`
  font-size: 16px;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 12px;
  display: flex;
  align-items: center;
  gap: 8px;
`;

const SkillsGrid = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
`;

const SkillTag = styled.span`
  padding: 6px 12px;
  background: linear-gradient(135deg, var(--primary-color), #00a844);
  color: white;
  border-radius: 20px;
  font-size: 12px;
  font-weight: 500;
  display: inline-flex;
  align-items: center;
  gap: 4px;
`;

const AiAnalysisSection = styled.div`
  margin-top: 16px;
  padding: 16px;
  background: var(--background-secondary);
  border-radius: 8px;
  border: 1px solid var(--border-color);
`;

const AiAnalysisTitle = styled.h4`
  font-size: 14px;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 12px;
  display: flex;
  align-items: center;
  gap: 6px;
`;

const AiAnalysisContent = styled.div`
  display: flex;
  align-items: center;
  gap: 16px;
`;

const SuitabilityGraph = styled.div`
  position: relative;
  width: 60px;
  height: 60px;
  display: flex;
  align-items: center;
  justify-content: center;
`;

const CircularProgress = styled.div`
  position: relative;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  background: conic-gradient(
    ${props => {
      if (props.percentage >= 90) return '#10b981';
      if (props.percentage >= 80) return '#f59e0b';
      return '#ef4444';
    }} 0deg ${props => props.percentage * 3.6}deg,
    #e5e7eb ${props => props.percentage * 3.6}deg 360deg
  );
  display: flex;
  align-items: center;
  justify-content: center;
  
  &::before {
    content: '';
    position: absolute;
    width: 80%;
    height: 80%;
    background: white;
    border-radius: 50%;
  }
`;

const PercentageText = styled.div`
  position: absolute;
  font-size: 12px;
  font-weight: 700;
  color: ${props => {
    if (props.percentage >= 90) return '#10b981';
    if (props.percentage >= 80) return '#f59e0b';
    return '#ef4444';
  }};
`;

const SuitabilityInfo = styled.div`
  flex: 1;
`;

const SuitabilityLabel = styled.div`
  font-size: 12px;
  color: var(--text-secondary);
  margin-bottom: 4px;
`;

const SuitabilityValue = styled.div`
  font-size: 16px;
  font-weight: 700;
  color: ${props => {
    if (props.percentage >= 90) return '#10b981';
    if (props.percentage >= 80) return '#f59e0b';
    return '#ef4444';
  }};
`;

// Board view specific AI analysis components
const AiAnalysisSectionBoard = styled.div`
  display: flex;
  align-items: center;
  gap: 8px;
  min-width: 120px;
`;

const AiAnalysisTitleBoard = styled.h4`
  font-size: 10px;
  font-weight: 600;
  color: var(--text-secondary);
  display: flex;
  align-items: center;
  gap: 4px;
`;

const SuitabilityGraphBoard = styled.div`
  position: relative;
  width: 24px;
  height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
`;

const CircularProgressBoard = styled.div`
  position: relative;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  background: conic-gradient(
    ${props => {
      if (props.percentage >= 90) return '#10b981';
      if (props.percentage >= 80) return '#f59e0b';
      return '#ef4444';
    }} 0deg ${props => props.percentage * 3.6}deg,
    #e5e7eb ${props => props.percentage * 3.6}deg 360deg
  );
  display: flex;
  align-items: center;
  justify-content: center;
  
  &::before {
    content: '';
    position: absolute;
    width: 80%;
    height: 80%;
    background: white;
    border-radius: 50%;
  }
`;

const PercentageTextBoard = styled.div`
  position: absolute;
  font-size: 8px;
  font-weight: 700;
  color: ${props => {
    if (props.percentage >= 90) return '#10b981';
    if (props.percentage >= 80) return '#f59e0b';
    return '#ef4444';
  }};
`;

const SuitabilityValueBoard = styled.div`
  font-size: 10px;
  font-weight: 600;
  color: ${props => {
    if (props.percentage >= 90) return '#10b981';
    if (props.percentage >= 80) return '#f59e0b';
    return '#ef4444';
  }};
`;

const ApplicantRanksBoard = styled.div`
  display: flex;
  align-items: center;
  gap: 8px;
  min-width: 120px;
  justify-content: center;
  flex-wrap: nowrap;
  white-space: nowrap;
  margin-left: -70px;
`;

const RankItem = styled.div`
  display: flex;
  align-items: center;
  gap: 2px;
  font-size: 9px;
  color: var(--text-secondary);
  white-space: nowrap;
`;

const RankBadge = styled.span`
  padding: 1px 3px;
  border-radius: 3px;
  font-size: 8px;
  font-weight: 600;
  background: ${props => {
    if (props.rank <= 2) return '#10b981';
    if (props.rank <= 4) return '#f59e0b';
    return '#ef4444';
  }};
  color: white;
`;

// ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Ï†úÍ±∞Îê® - Ïù¥Ï†ú MongoDBÏóêÏÑúÎßå Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏ÏòµÎãàÎã§

// Î©îÎ™®Ïù¥Ï†úÏù¥ÏÖòÎêú ÏßÄÏõêÏûê Ïπ¥Îìú Ïª¥Ìè¨ÎÑåÌä∏
const MemoizedApplicantCard = React.memo(({ applicant, onCardClick, onStatusUpdate, getStatusText }) => {
  const handleStatusUpdate = useCallback(async (newStatus) => {
    try {
      await onStatusUpdate(applicant.id, newStatus);
    } catch (error) {
      console.error('ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:', error);
    }
  }, [applicant.id, onStatusUpdate]);

  return (
    <ApplicantCard
      onClick={() => onCardClick(applicant)}
      whileHover={{ scale: 1.02 }}
      whileTap={{ scale: 0.98 }}
    >
      <CardHeader>
        <ApplicantInfo>
          <ApplicantName>{applicant.name}</ApplicantName>
          <ApplicantPosition>{applicant.position}</ApplicantPosition>
        </ApplicantInfo>
        <StatusBadge status={applicant.status}>
          {getStatusText(applicant.status)}
        </StatusBadge>
      </CardHeader>
      
      <CardContent>
        <InfoRow>
          <FiMail />
          <span>{applicant.email}</span>
        </InfoRow>
        <InfoRow>
          <FiPhone />
          <span>{applicant.phone}</span>
        </InfoRow>
        <InfoRow>
          <FiCalendar />
          <span>{applicant.appliedDate}</span>
        </InfoRow>
        <InfoRow>
          <FiCode />
          <span>{applicant.skills || 'Í∏∞Ïà† Ï†ïÎ≥¥ ÏóÜÏùå'}</span>
        </InfoRow>
      </CardContent>
      
      <CardActions>
        <PassButton 
          active={applicant.status === 'ÏÑúÎ•òÌï©Í≤©' || applicant.status === 'ÏµúÏ¢ÖÌï©Í≤©'}
          onClick={(e) => {
            e.stopPropagation();
            handleStatusUpdate('ÏÑúÎ•òÌï©Í≤©');
          }}
        >
          <FiCheck />
          Ìï©Í≤©
        </PassButton>
        <PendingButton 
          active={applicant.status === 'Î≥¥Î•ò'}
          onClick={(e) => {
            e.stopPropagation();
            handleStatusUpdate('Î≥¥Î•ò');
          }}
        >
          <FiClock />
          Î≥¥Î•ò
        </PendingButton>
        <RejectButton 
          active={applicant.status === 'ÏÑúÎ•òÎ∂àÌï©Í≤©'}
          onClick={(e) => {
            e.stopPropagation();
            handleStatusUpdate('ÏÑúÎ•òÎ∂àÌï©Í≤©');
          }}
        >
          <FiX />
          Î∂àÌï©Í≤©
        </RejectButton>
      </CardActions>
    </ApplicantCard>
  );
});

MemoizedApplicantCard.displayName = 'MemoizedApplicantCard';

const ApplicantManagement = () => {
  // Status Îß§Ìïë Ìï®Ïàò
  const getStatusText = (status) => {
    const statusMap = {
      'pending': 'Î≥¥Î•ò',
      'approved': 'ÏäπÏù∏',
      'rejected': 'Í±∞Ï†à',
      'ÏÑúÎ•òÌï©Í≤©': 'ÏÑúÎ•òÌï©Í≤©',
      'ÏµúÏ¢ÖÌï©Í≤©': 'ÏµúÏ¢ÖÌï©Í≤©', 
      'ÏÑúÎ•òÎ∂àÌï©Í≤©': 'ÏÑúÎ•òÎ∂àÌï©Í≤©',
      'Î≥¥Î•ò': 'Î≥¥Î•ò'
    };
    return statusMap[status] || status;
  };

  const [applicants, setApplicants] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState('Ï†ÑÏ≤¥');
  const [selectedApplicant, setSelectedApplicant] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [documentModal, setDocumentModal] = useState({ isOpen: false, type: '', applicant: null, isOriginal: false, similarityData: null, isLoadingSimilarity: false, documentData: null });
  // Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Î™®Îã¨ ÎÇ¥ Î∑∞ ÏÑ†ÌÉù ÏÉÅÌÉú: 'select' | 'github' | 'portfolio'
  const [portfolioView, setPortfolioView] = useState('select');
  // Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Îç∞Ïù¥ÌÑ∞ ÏÉÅÌÉú
  const [portfolioData, setPortfolioData] = useState(null);
  const [isLoadingPortfolio, setIsLoadingPortfolio] = useState(false);
  const [filterModal, setFilterModal] = useState(false);
  const [selectedJobs, setSelectedJobs] = useState([]);
  const [selectedExperience, setSelectedExperience] = useState([]);
  const [viewMode, setViewMode] = useState('grid');
  const [hoveredApplicant, setHoveredApplicant] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [selectedApplicants, setSelectedApplicants] = useState([]);
  const [selectAll, setSelectAll] = useState(false);
  const [stats, setStats] = useState({
    total: 0,
    passed: 0,
    waiting: 0,
    rejected: 0
  });

  // Ïú†ÏÇ¨ Ïù∏Ïû¨ Ï∂îÏ≤ú ÏÉÅÌÉú
  const [similarCandidates, setSimilarCandidates] = useState({
    isLoading: false,
    data: null,
    error: null
  });

  // ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò ÏÉÅÌÉú
  const [currentPage, setCurrentPage] = useState(0);
  const [pageSize] = useState(20);
  const [hasMore, setHasMore] = useState(true);

  // ÏÉà Ïù¥Î†•ÏÑú Îì±Î°ù Î™®Îã¨ ÏÉÅÌÉú
  const [isResumeModalOpen, setIsResumeModalOpen] = useState(false);
  const [resumeFile, setResumeFile] = useState(null);
  const [coverLetterFile, setCoverLetterFile] = useState(null);
  const [portfolioFile, setPortfolioFile] = useState(null);
  const [documentType, setDocumentType] = useState('Ïù¥Î†•ÏÑú');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisResult, setAnalysisResult] = useState(null);
  const [isDragOver, setIsDragOver] = useState(false);
  const [showDetailedAnalysis, setShowDetailedAnalysis] = useState(false);
  const [resumeData, setResumeData] = useState({
    name: '',
    email: '',
    phone: '',
    position: '',
    experience: '',
    skills: []
  });

  // Î©îÎ™®Ïù¥Ï†úÏù¥ÏÖòÎêú ÌïÑÌÑ∞ÎßÅÎêú ÏßÄÏõêÏûê Î™©Î°ù
  const filteredApplicants = useMemo(() => {
    return (applicants || []).filter(applicant => {
      const searchLower = searchTerm.toLowerCase();
      
      // Í≤ÄÏÉâ ÌïÑÌÑ∞ÎßÅ (null/undefined Ï≤¥ÌÅ¨ Ï∂îÍ∞Ä)
      const matchesSearch = (applicant.name || '').toLowerCase().includes(searchLower) ||
                          (applicant.position || '').toLowerCase().includes(searchLower) ||
                          (applicant.email || '').toLowerCase().includes(searchLower) ||
                          (applicant.skills || '').toLowerCase().includes(searchLower);
      
      // ÏÉÅÌÉú ÌïÑÌÑ∞ÎßÅ (ÌïúÍµ≠Ïñ¥ ÌïÑÌÑ∞Î•º ÏòÅÏñ¥ ÏÉÅÌÉúÏôÄ Îß§Ïπ≠)
      const matchesStatus = filterStatus === 'Ï†ÑÏ≤¥' || 
                           getStatusText(applicant.status) === filterStatus ||
                           applicant.status === filterStatus;
      
      // ÏßÅÎ¨¥ ÌïÑÌÑ∞ÎßÅ
      const matchesJob = selectedJobs.length === 0 || 
                        selectedJobs.some(job => applicant.position.includes(job));
      
      // Í≤ΩÎ†• ÌïÑÌÑ∞ÎßÅ
      const matchesExperience = selectedExperience.length === 0 || 
                              selectedExperience.some(exp => {
                                if (exp === 'Ïã†ÏûÖ') return applicant.experience.includes('Ïã†ÏûÖ') || applicant.experience.includes('0ÎÖÑ');
                                if (exp === '1-3ÎÖÑ') return applicant.experience.includes('1ÎÖÑ') || applicant.experience.includes('2ÎÖÑ') || applicant.experience.includes('3ÎÖÑ');
                                if (exp === '3-5ÎÖÑ') return applicant.experience.includes('4ÎÖÑ') || applicant.experience.includes('5ÎÖÑ');
                                if (exp === '5ÎÖÑÏù¥ÏÉÅ') return applicant.experience.includes('6ÎÖÑ') || applicant.experience.includes('7ÎÖÑ') || applicant.experience.includes('8ÎÖÑ') || applicant.experience.includes('9ÎÖÑ') || applicant.experience.includes('10ÎÖÑ');
                                return false;
                              });
      
      return matchesSearch && matchesStatus && matchesJob && matchesExperience;
    });
  }, [applicants, searchTerm, filterStatus, selectedJobs, selectedExperience]);

  // Î©îÎ™®Ïù¥Ï†úÏù¥ÏÖòÎêú ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖòÎêú ÏßÄÏõêÏûê Î™©Î°ù
  const paginatedApplicants = useMemo(() => {
    const startIndex = currentPage * pageSize;
    return filteredApplicants.slice(startIndex, startIndex + pageSize);
  }, [filteredApplicants, currentPage, pageSize]);

  // Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  useEffect(() => {
    loadApplicants();
    loadStats();
  }, []);

  // applicants ÏÉÅÌÉúÍ∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    updateLocalStats();
  }, [applicants]);

  // ÏßÄÏõêÏûê Îç∞Ïù¥ÌÑ∞ Î°úÎìú (ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò ÏßÄÏõê)
  const loadApplicants = useCallback(async (page = 0, append = false) => {
    try {
      setIsLoading(true);
      console.log('ÏßÄÏõêÏûê Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...');
      
      const skip = page * pageSize;
      const apiApplicants = await api.getAllApplicants(skip, pageSize);
      
      if (apiApplicants && apiApplicants.length > 0) {
        console.log(`‚úÖ APIÏóêÏÑú ${apiApplicants.length}Î™ÖÏùò ÏßÄÏõêÏûê Îç∞Ïù¥ÌÑ∞Î•º ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î°úÎìúÌñàÏäµÎãàÎã§.`);
        
        if (append) {
          setApplicants(prev => [...prev, ...apiApplicants]);
        } else {
          setApplicants(apiApplicants);
        }
        
        setHasMore(apiApplicants.length === pageSize);
      } else {
        console.log('‚ö†Ô∏è APIÏóêÏÑú Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
        setApplicants([]);
        setHasMore(false);
      }
    } catch (error) {
      console.error('‚ùå API Ïó∞Í≤∞ Ïã§Ìå®:', error);
      console.log('üîÑ Î∞±ÏóîÎìú ÏÑúÎ≤Ñ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
      setApplicants([]);
      setHasMore(false);
    } finally {
      setIsLoading(false);
    }
  }, [pageSize]);

  // ÌÜµÍ≥Ñ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  const loadStats = useCallback(async () => {
    try {
      const apiStats = await api.getApplicantStats();
      setStats(apiStats);
    } catch (error) {
      console.error('ÌÜµÍ≥Ñ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
      // Í∏∞Î≥∏ ÌÜµÍ≥Ñ Í≥ÑÏÇ∞
      updateLocalStats();
    }
  }, []);

  // Î°úÏª¨ ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
  const updateLocalStats = useCallback(() => {
    const currentStats = {
      total: (applicants || []).length,
      passed: (applicants || []).filter(a => a.status === 'ÏÑúÎ•òÌï©Í≤©' || a.status === 'ÏµúÏ¢ÖÌï©Í≤©').length,
      waiting: (applicants || []).filter(a => a.status === 'Î≥¥Î•ò').length,
      rejected: (applicants || []).filter(a => a.status === 'ÏÑúÎ•òÎ∂àÌï©Í≤©').length
    };
    setStats(currentStats);
  }, [applicants]);

  // ÏßÄÏõêÏûê ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
  const handleUpdateStatus = useCallback(async (applicantId, newStatus) => {
    try {
      // ÌòÑÏû¨ ÏßÄÏõêÏûêÏùò Ïù¥Ï†Ñ ÏÉÅÌÉú ÌôïÏù∏
      const currentApplicant = applicants.find(a => a.id === applicantId);
      const previousStatus = currentApplicant ? currentApplicant.status : 'ÏßÄÏõê';
      
      console.log(`üîÑ ÏÉÅÌÉú Î≥ÄÍ≤Ω: ${previousStatus} ‚Üí ${newStatus}`);
      
      // API Ìò∏Ï∂ú ÏãúÎèÑ (Ïã§Ìå®Ìï¥ÎèÑ Î°úÏª¨ ÏÉÅÌÉúÎäî ÏóÖÎç∞Ïù¥Ìä∏)
      try {
        await api.updateApplicantStatus(applicantId, newStatus);
        console.log(`‚úÖ API Ìò∏Ï∂ú ÏÑ±Í≥µ`);
      } catch (apiError) {
        console.log(`‚ö†Ô∏è API Ìò∏Ï∂ú Ïã§Ìå®, Î°úÏª¨ ÏÉÅÌÉúÎßå ÏóÖÎç∞Ïù¥Ìä∏:`, apiError.message);
      }
      
      // Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Î∞è ÌÜµÍ≥Ñ Ï¶âÏãú Í≥ÑÏÇ∞
      setApplicants(prev => {
        const updatedApplicants = (prev || []).map(applicant => 
          applicant.id === applicantId 
            ? { ...applicant, status: newStatus }
            : applicant
        );
        
        // ÌÜµÍ≥Ñ Ï¶âÏãú ÏóÖÎç∞Ïù¥Ìä∏
        const newStats = {
          total: updatedApplicants.length,
          passed: updatedApplicants.filter(a => a.status === 'ÏÑúÎ•òÌï©Í≤©' || a.status === 'ÏµúÏ¢ÖÌï©Í≤©').length,
          waiting: updatedApplicants.filter(a => a.status === 'Î≥¥Î•ò').length,
          rejected: updatedApplicants.filter(a => a.status === 'ÏÑúÎ•òÎ∂àÌï©Í≤©').length
        };
        
        console.log(`üìä ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏:`, {
          Ïù¥Ï†ÑÏÉÅÌÉú: previousStatus,
          ÏÉàÏÉÅÌÉú: newStatus,
          Ï¥ùÏßÄÏõêÏûê: newStats.total,
          ÏÑúÎ•òÌï©Í≤©: newStats.passed,
          Î≥¥Î•ò: newStats.waiting,
          ÏÑúÎ•òÎ∂àÌï©Í≤©: newStats.rejected
        });
        
        setStats(newStats);
        
        return updatedApplicants;
      });
      
      console.log(`‚úÖ ÏßÄÏõêÏûê ${applicantId}Ïùò ÏÉÅÌÉúÍ∞Ä ${newStatus}Î°ú ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§.`);
    } catch (error) {
      console.error('ÏßÄÏõêÏûê ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:', error);
    }
  }, [applicants]);

  // Î¨¥Ìïú Ïä§ÌÅ¨Î°§ Ìï∏Îì§Îü¨
  const handleLoadMore = useCallback(() => {
    if (!isLoading && hasMore) {
      const nextPage = currentPage + 1;
      setCurrentPage(nextPage);
      loadApplicants(nextPage, true);
    }
  }, [isLoading, hasMore, currentPage, loadApplicants]);

  const handleCardClick = (applicant) => {
    setSelectedApplicant(applicant);
    setIsModalOpen(true);
    
    // Î™®Îã¨ Ïó¥Î¶¥ Îïå ÏûêÎèôÏúºÎ°ú Ïú†ÏÇ¨ Ïù∏Ïû¨ Î∂ÑÏÑù ÏãúÏûë
    handleSimilarCandidatesAnalysis(applicant);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setSelectedApplicant(null);
    // Ïú†ÏÇ¨ Ïù∏Ïû¨ Î∂ÑÏÑù ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
    setSimilarCandidates({
      isLoading: false,
      data: null,
      error: null
    });
  };

  const handleDocumentClick = async (type, applicant) => {
    console.log('Î¨∏ÏÑú ÌÅ¥Î¶≠:', type, applicant);
    
    // applicant Í∞ùÏ≤¥Ïóê _idÍ∞Ä ÏóÜÏúºÎ©¥ idÎ•º _idÎ°ú ÏÑ§Ï†ï
    const applicantWithId = {
      ...applicant,
      _id: applicant._id || applicant.id
    };
    
    // Î™®Îã¨ Î®ºÏ†Ä Ïó¥Í∏∞
    setDocumentModal({ isOpen: true, type, applicant: applicantWithId, isOriginal: false, similarityData: null, isLoadingSimilarity: false });
    if (type === 'portfolio') {
      setPortfolioView('select');
    }
    
    // Í∞Å Î¨∏ÏÑú ÌÉÄÏûÖÎ≥ÑÎ°ú Ìï¥Îãπ Ïª¨Î†âÏÖòÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
    try {
      let documentData = null;
      const applicantId = applicantWithId._id;
      
      switch (type) {
        case 'resume':
          const resumeResponse = await fetch(`${API_BASE_URL}/api/applicants/${applicantId}/resume`);
          if (resumeResponse.ok) {
            documentData = await resumeResponse.json();
            console.log('‚úÖ Ïù¥Î†•ÏÑú Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å:', documentData);
          } else {
            console.error('‚ùå Ïù¥Î†•ÏÑú Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', resumeResponse.status);
          }
          break;
          
        case 'coverLetter':
          const coverLetterResponse = await fetch(`${API_BASE_URL}/api/applicants/${applicantId}/cover-letter`);
          if (coverLetterResponse.ok) {
            documentData = await coverLetterResponse.json();
            console.log('‚úÖ ÏûêÏÜåÏÑú Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å:', documentData);
          } else {
            console.error('‚ùå ÏûêÏÜåÏÑú Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', coverLetterResponse.status);
          }
          break;
          
        case 'portfolio':
          const portfolioResponse = await fetch(`${API_BASE_URL}/api/applicants/${applicantId}/portfolio`);
          if (portfolioResponse.ok) {
            documentData = await portfolioResponse.json();
            console.log('‚úÖ Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å:', documentData);
          } else {
            console.error('‚ùå Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', portfolioResponse.status);
          }
          break;
      }
      
      // Î¨∏ÏÑú Îç∞Ïù¥ÌÑ∞Î•º Î™®Îã¨ ÏÉÅÌÉúÏóê Ï†ÄÏû•
      if (documentData) {
        setDocumentModal(prev => ({ 
          ...prev, 
          documentData,
          isLoadingSimilarity: false 
        }));
      }
      
    } catch (error) {
      console.error('‚ùå Î¨∏ÏÑú Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïò§Î•ò:', error);
      setDocumentModal(prev => ({ ...prev, isLoadingSimilarity: false }));
    }
    
    // ÏûêÏÜåÏÑú ÌÉÄÏûÖÏùº ÎïåÎßå Ïú†ÏÇ¨ÎèÑ Ï≤¥ÌÅ¨ Ïã§Ìñâ
    if (type === 'coverLetter') {
      setDocumentModal(prev => ({ ...prev, isLoadingSimilarity: true }));
      
      try {
        const endpoint = 'coverletter';
        const response = await fetch(`${API_BASE_URL}/api/${endpoint}/similarity-check/${applicantWithId._id}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        if (response.ok) {
          const similarityData = await response.json();
          console.log('‚úÖ Ïú†ÏÇ¨ÎèÑ Ï≤¥ÌÅ¨ ÏôÑÎ£å:', similarityData);
          
          setDocumentModal(prev => ({ 
            ...prev, 
            similarityData, 
            isLoadingSimilarity: false 
          }));
        } else {
          console.error('‚ùå Ïú†ÏÇ¨ÎèÑ Ï≤¥ÌÅ¨ Ïã§Ìå®:', response.status);
          setDocumentModal(prev => ({ ...prev, isLoadingSimilarity: false }));
        }
      } catch (error) {
        console.error('‚ùå Ïú†ÏÇ¨ÎèÑ Ï≤¥ÌÅ¨ Ïò§Î•ò:', error);
        setDocumentModal(prev => ({ ...prev, isLoadingSimilarity: false }));
      }
    }
  };

  const handleOriginalClick = () => {
    setDocumentModal(prev => ({ ...prev, isOriginal: !prev.isOriginal }));
  };

  const handleCloseDocumentModal = () => {
    setDocumentModal({ isOpen: false, type: '', applicant: null, isOriginal: false, similarityData: null, isLoadingSimilarity: false, documentData: null });
    setPortfolioView('select');
    setPortfolioData(null);
  };

  // Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
  const loadPortfolioData = async (applicantId) => {
    try {
      setIsLoadingPortfolio(true);
      console.log('Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...', applicantId);
      
      if (!applicantId) {
        console.error('ÏßÄÏõêÏûê IDÍ∞Ä ÏóÜÏäµÎãàÎã§');
        setPortfolioData(null);
        return;
      }
      
      const portfolio = await api.getPortfolioByApplicantId(applicantId);
      console.log('Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Îç∞Ïù¥ÌÑ∞:', portfolio);
      
      setPortfolioData(portfolio);
    } catch (error) {
      console.error('Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïò§Î•ò:', error);
      setPortfolioData(null);
    } finally {
      setIsLoadingPortfolio(false);
    }
  };

  const handleSimilarApplicantClick = async (similarData) => {
    try {
      // Ïú†ÏÇ¨Ìïú ÏßÄÏõêÏûêÏùò IDÎ•º ÏÇ¨Ïö©Ìï¥ÏÑú Ï†ÑÏ≤¥ ÏßÄÏõêÏûê Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò¥
      const response = await fetch(`${API_BASE_URL}/api/applicants/${similarData.resume_id}`);
      if (response.ok) {
        const applicantData = await response.json();
        
        // ÌòÑÏû¨ Î™®Îã¨Ïùò ÌÉÄÏûÖÏùÑ Í∏∞ÏñµÌï¥Îë† (ÏûêÏÜåÏÑúÏóêÏÑú ÌÅ¥Î¶≠ÌñàÏúºÎ©¥ ÏûêÏÜåÏÑúÎ•º, Ïù¥Î†•ÏÑúÏóêÏÑú ÌÅ¥Î¶≠ÌñàÏúºÎ©¥ Ïù¥Î†•ÏÑúÎ•º)
        const currentModalType = documentModal.type;
        
        // ÌòÑÏû¨ Î™®Îã¨ÏùÑ Îã´Í≥† ÏÉàÎ°úÏö¥ Î™®Îã¨ÏùÑ Ïó¥Í∏∞
        setDocumentModal({ isOpen: false, type: '', applicant: null, isOriginal: false, similarityData: null, isLoadingSimilarity: false });
        
        // ÏïΩÍ∞ÑÏùò ÎîúÎ†àÏù¥ ÌõÑÏóê ÏÉàÎ°úÏö¥ Î™®Îã¨ Ïó¥Í∏∞ (Î∂ÄÎìúÎü¨Ïö¥ Ï†ÑÌôòÏùÑ ÏúÑÌï¥)
        setTimeout(() => {
          setDocumentModal({
            isOpen: true,
            type: currentModalType, // ÌòÑÏû¨ Î™®Îã¨Ïùò ÌÉÄÏûÖÏùÑ Ïú†ÏßÄ
            applicant: applicantData,
            isOriginal: true,
            similarityData: null,
            isLoadingSimilarity: false
          });
        }, 100);
      } else {
        console.error('ÏßÄÏõêÏûê Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    } catch (error) {
      console.error('ÏßÄÏõêÏûê Ï†ïÎ≥¥ ÏöîÏ≤≠ Ï§ë Ïò§Î•ò:', error);
    }
  };

  // Ïú†ÏÇ¨ Ïù∏Ïû¨ Ï∂îÏ≤ú Ìï∏Îì§Îü¨
  const handleSimilarCandidatesAnalysis = async (applicant) => {
    setSimilarCandidates({
      isLoading: true,
      data: null,
      error: null
    });

    try {
      console.log('üîç Ïú†ÏÇ¨ Ïù∏Ïû¨ Î∂ÑÏÑù ÏãúÏûë:', applicant.id);
      const response = await fetch(`${API_BASE_URL}/api/applicants/similar-recommendation/${applicant.id}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      const result = await response.json();
      
      if (result.success && result.data?.results) {
        console.log('‚úÖ ÌïòÏù¥Î∏åÎ¶¨Îìú Ïú†ÏÇ¨ Ïù∏Ïû¨ Î∂ÑÏÑù ÏôÑÎ£å:', result.data.results.length, 'Î™Ö');
        console.log('üìä Í≤ÄÏÉâ Î∞©Î≤ïÎ≥Ñ Í≤∞Í≥º: Î≤°ÌÑ∞', result.data.vector_count, 'Í∞ú, ÌÇ§ÏõåÎìú', result.data.keyword_count, 'Í∞ú');
        setSimilarCandidates({
          isLoading: false,
          data: result.data.results,
          error: null
        });
      } else {
        console.log('‚ö†Ô∏è Ïú†ÏÇ¨ Ïù∏Ïû¨Î•º Ï∞æÏßÄ Î™ªÌï®:', result.message);
        setSimilarCandidates({
          isLoading: false,
          data: [],
          error: result.message || 'Ïú†ÏÇ¨ Ïù∏Ïû¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'
        });
      }
    } catch (error) {
      console.error('‚ùå Ïú†ÏÇ¨ Ïù∏Ïû¨ Î∂ÑÏÑù Ïã§Ìå®:', error);
      setSimilarCandidates({
        isLoading: false,
        data: null,
        error: 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
      });
    }
  };

  const handleViewSimilarCandidate = (candidateResume) => {
    // Ïú†ÏÇ¨ Ïù∏Ïû¨Ïùò ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º Î™®Îã¨Î°ú ÌëúÏãú
    setSelectedApplicant(candidateResume);
    // ÏÉàÎ°úÏö¥ ÏßÄÏõêÏûêÏóê ÎåÄÌï¥ Ïú†ÏÇ¨ Ïù∏Ïû¨ Î∂ÑÏÑù ÏãúÏûë
    handleSimilarCandidatesAnalysis(candidateResume);
  };

  const handleFilterClick = () => {
    setFilterModal(true);
  };

  const handleCloseFilterModal = () => {
    setFilterModal(false);
  };

  const handleJobChange = (job) => {
    setSelectedJobs(prev => 
      prev.includes(job) 
        ? prev.filter(j => j !== job)
        : [...prev, job]
    );
  };

  const handleExperienceChange = (experience) => {
    setSelectedExperience(prev => 
      prev.includes(experience) 
        ? prev.filter(e => e !== experience)
        : [...prev, experience]
    );
  };

  const handleApplyFilter = () => {
    setFilterModal(false);
  };

  const handleResetFilter = () => {
    setSelectedJobs([]);
    setSelectedExperience([]);
    setFilterStatus('Ï†ÑÏ≤¥');
    setSearchTerm('');
  };

  const handleViewModeChange = (mode) => {
    setViewMode(mode);
  };

  // ÏßÄÏõêÏûê ÏÇ≠Ï†ú Ìï∏Îì§Îü¨
  const handleDeleteApplicant = async (applicantId) => {
    if (!window.confirm('Ï†ïÎßêÎ°ú Ïù¥ ÏßÄÏõêÏûêÎ•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå? Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.')) {
      return;
    }

    try {
      const response = await fetch(`${API_BASE_URL}/api/applicants/${applicantId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        console.log('‚úÖ ÏßÄÏõêÏûê ÏÇ≠Ï†ú ÏÑ±Í≥µ');
        
        // Î™®Îã¨ Îã´Í∏∞
        handleCloseModal();
        
        // ÏßÄÏõêÏûê Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
        setCurrentPage(0);
        loadApplicants(0, false);
        
        // ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
        loadStats();
        
        alert('ÏßÄÏõêÏûêÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
      } else {
        const errorData = await response.json();
        console.error('‚ùå ÏßÄÏõêÏûê ÏÇ≠Ï†ú Ïã§Ìå®:', errorData);
        alert(`ÏßÄÏõêÏûê ÏÇ≠Ï†ú Ïã§Ìå®: ${errorData.detail || 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`);
      }
    } catch (error) {
      console.error('‚ùå ÏßÄÏõêÏûê ÏÇ≠Ï†ú Ïò§Î•ò:', error);
      alert('ÏßÄÏõêÏûê ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  // Ï≤¥ÌÅ¨Î∞ïÏä§ Í¥ÄÎ†® Ìï∏Îì§Îü¨Îì§
  const handleSelectAll = () => {
    if (selectAll) {
      setSelectedApplicants([]);
      setSelectAll(false);
    } else {
      setSelectedApplicants((paginatedApplicants || []).map(applicant => applicant.id));
      setSelectAll(true);
    }
  };

  const handleSelectApplicant = (applicantId) => {
    setSelectedApplicants(prev => {
      if (prev.includes(applicantId)) {
        const newSelected = prev.filter(id => id !== applicantId);
        setSelectAll(newSelected.length === paginatedApplicants.length);
        return newSelected;
      } else {
        const newSelected = [...prev, applicantId];
        setSelectAll(newSelected.length === paginatedApplicants.length);
        return newSelected;
      }
    });
  };

  const handleBulkStatusUpdate = async (newStatus) => {
    if (selectedApplicants.length === 0) {
      return;
    }

    try {
      // ÏÑ†ÌÉùÎêú Î™®Îì† ÏßÄÏõêÏûêÏùò ÏÉÅÌÉúÎ•º ÏùºÍ¥Ñ ÏóÖÎç∞Ïù¥Ìä∏
      for (const applicantId of selectedApplicants) {
        await handleUpdateStatus(applicantId, newStatus);
      }
      
      // ÏÑ†ÌÉù Ìï¥Ï†ú
      setSelectedApplicants([]);
      setSelectAll(false);
    } catch (error) {
      console.error('ÏùºÍ¥Ñ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:', error);
    }
  };

  // ÌòÑÏû¨ Ï†ÅÏö©Îêú ÌïÑÌÑ∞ ÏÉÅÌÉú ÌôïÏù∏
  const hasActiveFilters = searchTerm !== '' || 
                          filterStatus !== 'Ï†ÑÏ≤¥' || 
                          selectedJobs.length > 0 || 
                          selectedExperience.length > 0;

  // ÌïÑÌÑ∞ ÏÉÅÌÉú ÌÖçÏä§Ìä∏ ÏÉùÏÑ±
  const getFilterStatusText = () => {
    const filters = [];
    if (searchTerm) filters.push(`Í≤ÄÏÉâ: "${searchTerm}"`);
    if (filterStatus !== 'Ï†ÑÏ≤¥') filters.push(`ÏÉÅÌÉú: ${filterStatus}`);
    if ((selectedJobs || []).length > 0) filters.push(`ÏßÅÎ¨¥: ${(selectedJobs || []).join(', ')}`);
    if ((selectedExperience || []).length > 0) filters.push(`Í≤ΩÎ†•: ${(selectedExperience || []).join(', ')}`);
    return filters.join(' | ');
  };

  // ÏÉà Ïù¥Î†•ÏÑú Îì±Î°ù Ìï∏Îì§Îü¨Îì§
  const handleResumeModalOpen = () => {
    setIsResumeModalOpen(true);
  };

  const handleResumeModalClose = () => {
    setIsResumeModalOpen(false);
    setResumeFile(null);
    setCoverLetterFile(null);
    setPortfolioFile(null);
    setIsAnalyzing(false);
    setAnalysisResult(null);
    setIsDragOver(false);
  };

  // ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠ Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨Îì§
  const handleDragOver = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragOver(true);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragOver(false);
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragOver(false);
    
    const files = e.dataTransfer.files;
    if (files && files.length > 0) {
      const file = files[0];
      // ÌååÏùº ÌÉÄÏûÖ Í≤ÄÏ¶ù
      const allowedTypes = ['.pdf', '.doc', '.docx', '.txt'];
      const fileExtension = '.' + file.name.split('.').pop().toLowerCase();
      
      if (allowedTypes.includes(fileExtension)) {
        // ÌååÏùºÎ™ÖÏúºÎ°ú Ïù¥Î†•ÏÑúÏù∏ÏßÄ ÏûêÍ∏∞ÏÜåÍ∞úÏÑúÏù∏ÏßÄ Ìè¨Ìä∏Ìè¥Î¶¨Ïò§Ïù∏ÏßÄ ÌåêÎã®
        const fileName = file.name.toLowerCase();
        if (fileName.includes('ÏûêÍ∏∞ÏÜåÍ∞úÏÑú') || fileName.includes('cover') || fileName.includes('coverletter')) {
          setCoverLetterFile(file);
          console.log('ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠ÏúºÎ°ú ÏûêÍ∏∞ÏÜåÍ∞úÏÑú ÌååÏùºÏù¥ ÏóÖÎ°úÎìúÎêòÏóàÏäµÎãàÎã§:', file.name);
        } else if (fileName.includes('Ìè¨Ìä∏Ìè¥Î¶¨Ïò§') || fileName.includes('portfolio')) {
          setPortfolioFile(file);
          console.log('ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠ÏúºÎ°ú Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÌååÏùºÏù¥ ÏóÖÎ°úÎìúÎêòÏóàÏäµÎãàÎã§:', file.name);
        } else {
          setResumeFile(file);
          console.log('ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠ÏúºÎ°ú Ïù¥Î†•ÏÑú ÌååÏùºÏù¥ ÏóÖÎ°úÎìúÎêòÏóàÏäµÎãàÎã§:', file.name);
        }
      } else {
        alert('ÏßÄÏõêÌïòÏßÄ ÏïäÎäî ÌååÏùº ÌòïÏãùÏûÖÎãàÎã§. PDF, DOC, DOCX, TXT ÌååÏùºÎßå ÏóÖÎ°úÎìú Í∞ÄÎä•Ìï©ÎãàÎã§.');
      }
    }
  };

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      setResumeFile(file);
      // ÌååÏùºÎ™ÖÏóêÏÑú Í∏∞Î≥∏ Ï†ïÎ≥¥ Ï∂îÏ∂ú ÏãúÎèÑ
      const fileName = file.name.toLowerCase();
      if (fileName.includes('Ïù¥Î†•ÏÑú') || fileName.includes('resume')) {
        // ÌååÏùºÎ™ÖÏóêÏÑú Ï†ïÎ≥¥ Ï∂îÏ∂ú Î°úÏßÅ
        console.log('Ïù¥Î†•ÏÑú ÌååÏùºÏù¥ ÏÑ†ÌÉùÎêòÏóàÏäµÎãàÎã§:', file.name);
      }
    }
  };

  const handleCoverFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      setCoverLetterFile(file);
      // ÌååÏùºÎ™ÖÏóêÏÑú Í∏∞Î≥∏ Ï†ïÎ≥¥ Ï∂îÏ∂ú ÏãúÎèÑ
      const fileName = file.name.toLowerCase();
      if (fileName.includes('ÏûêÍ∏∞ÏÜåÍ∞úÏÑú') || fileName.includes('cover') || fileName.includes('coverletter')) {
        // ÌååÏùºÎ™ÖÏóêÏÑú Ï†ïÎ≥¥ Ï∂îÏ∂ú Î°úÏßÅ
        console.log('ÏûêÍ∏∞ÏÜåÍ∞úÏÑú ÌååÏùºÏù¥ ÏÑ†ÌÉùÎêòÏóàÏäµÎãàÎã§:', file.name);
      }
    }
  };

  const handlePortfolioFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      setPortfolioFile(file);
      console.log('Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÌååÏùºÏù¥ ÏÑ†ÌÉùÎêòÏóàÏäµÎãàÎã§:', file.name);
    }
  };

  const handleResumeDataChange = (field, value) => {
    setResumeData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSkillsChange = (skillsString) => {
    const skillsArray = skillsString.split(',').map(skill => skill.trim()).filter(skill => skill);
    setResumeData(prev => ({
      ...prev,
      skills: skillsArray
    }));
  };

  const handleResumeSubmit = async () => {
    try {
      console.log('üöÄ ÌÜµÌï© Î¨∏ÏÑú ÏóÖÎ°úÎìú ÏãúÏûë');
      console.log('üìÅ ÏÑ†ÌÉùÎêú ÌååÏùºÎì§:', { resumeFile, coverLetterFile, portfolioFile });
      
      // ÏµúÏÜå ÌïòÎÇòÏùò ÌååÏùºÏùÄ ÌïÑÏöî
      if (!resumeFile && !coverLetterFile && !portfolioFile) {
        alert('Ïù¥Î†•ÏÑú, ÏûêÍ∏∞ÏÜåÍ∞úÏÑú, ÎòêÎäî Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÌååÏùº Ï§ë ÌïòÎÇòÎäî ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
        return;
      }

      // ÌååÏùº ÎÇ¥Ïö© ÎØ∏Î¶¨Î≥¥Í∏∞ (ÎîîÎ≤ÑÍπÖÏö©)
      if (resumeFile) {
        console.log('üìÑ Ïù¥Î†•ÏÑú ÌååÏùº Ï†ïÎ≥¥:', {
          name: resumeFile.name,
          size: resumeFile.size,
          type: resumeFile.type,
          lastModified: new Date(resumeFile.lastModified).toLocaleString()
        });
      }
      
      if (coverLetterFile) {
        console.log('üìù ÏûêÍ∏∞ÏÜåÍ∞úÏÑú ÌååÏùº Ï†ïÎ≥¥:', {
          name: coverLetterFile.name,
          size: coverLetterFile.size,
          type: coverLetterFile.type,
          lastModified: new Date(coverLetterFile.lastModified).toLocaleString()
        });
      }

      if (portfolioFile) {
        console.log('üìÅ Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÌååÏùº Ï†ïÎ≥¥:', {
          name: portfolioFile.name,
          size: portfolioFile.size,
          type: portfolioFile.type,
          lastModified: new Date(portfolioFile.lastModified).toLocaleString()
        });
      }

      // ÌååÏùº Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Í∞ïÌôî
      const allowedTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'text/plain'];
              const maxSize = 50 * 1024 * 1024; // 50MB
      
      if (resumeFile) {
        if (!allowedTypes.includes(resumeFile.type) && !resumeFile.name.match(/\.(pdf|doc|docx|txt)$/i)) {
          alert('Ïù¥Î†•ÏÑú ÌååÏùº ÌòïÏãùÏù¥ ÏßÄÏõêÎêòÏßÄ ÏïäÏäµÎãàÎã§. PDF, DOC, DOCX, TXT ÌååÏùºÎßå ÏóÖÎ°úÎìú Í∞ÄÎä•Ìï©ÎãàÎã§.');
          return;
        }
        if (resumeFile.size > maxSize) {
                      alert('Ïù¥Î†•ÏÑú ÌååÏùº ÌÅ¨Í∏∞Í∞Ä 50MBÎ•º Ï¥àÍ≥ºÌï©ÎãàÎã§.');
          return;
        }
      }
      
      if (coverLetterFile) {
        if (!allowedTypes.includes(coverLetterFile.type) && !coverLetterFile.name.match(/\.(pdf|doc|docx|txt)$/i)) {
          alert('ÏûêÍ∏∞ÏÜåÍ∞úÏÑú ÌååÏùº ÌòïÏãùÏù¥ ÏßÄÏõêÎêòÏßÄ ÏïäÏäµÎãàÎã§. PDF, DOC, DOCX, TXT ÌååÏùºÎßå ÏóÖÎ°úÎìú Í∞ÄÎä•Ìï©ÎãàÎã§.');
          return;
        }
        if (coverLetterFile.size > maxSize) {
                      alert('ÏûêÍ∏∞ÏÜåÍ∞úÏÑú ÌååÏùº ÌÅ¨Í∏∞Í∞Ä 50MBÎ•º Ï¥àÍ≥ºÌï©ÎãàÎã§.');
          return;
        }
      }

      if (portfolioFile) {
        if (!portfolioFile.type.includes('pdf') && !portfolioFile.name.match(/\.pdf$/i)) {
          alert('Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÌååÏùºÏùÄ PDF ÌòïÏãùÎßå ÏßÄÏõêÎê©ÎãàÎã§.');
          return;
        }
        if (portfolioFile.size > maxSize) {
                      alert('Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÌååÏùº ÌÅ¨Í∏∞Í∞Ä 50MBÎ•º Ï¥àÍ≥ºÌï©ÎãàÎã§.');
          return;
        }
      }

      // Î∂ÑÏÑù ÏãúÏûë
      setIsAnalyzing(true);
      setAnalysisResult(null);

      // ÌÜµÌï© ÏóÖÎ°úÎìú API Ìò∏Ï∂ú
      console.log('üì§ ÌÜµÌï© ÏóÖÎ°úÎìú API Ìò∏Ï∂ú ÏãúÏûë');
      console.log('‚è±Ô∏è ÌÉÄÏûÑÏïÑÏõÉ ÏÑ§Ï†ï: 10Î∂Ñ (600Ï¥à)');
      
      const formData = new FormData();
      
      if (resumeFile) {
        console.log('üìÑ Ïù¥Î†•ÏÑú ÌååÏùº Ï†ÑÏÜ°:', {
          name: resumeFile.name,
          size: resumeFile.size,
          type: resumeFile.type
        });
        formData.append('resume_file', resumeFile);
      }
      if (coverLetterFile) {
        console.log('üìù ÏûêÍ∏∞ÏÜåÍ∞úÏÑú ÌååÏùº Ï†ÑÏÜ°:', {
          name: coverLetterFile.name,
          size: coverLetterFile.size,
          type: coverLetterFile.type
        });
        formData.append('cover_letter_file', coverLetterFile);
      }
      if (portfolioFile) {
        console.log('üìÅ Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÌååÏùº Ï†ÑÏÜ°:', {
          name: portfolioFile.name,
          size: portfolioFile.size,
          type: portfolioFile.type
        });
        formData.append('portfolio_file', portfolioFile);
      }

      const response = await fetch(`${API_BASE_URL}/api/integrated-ocr/upload-multiple-documents`, {
        method: 'POST',
        body: formData,
        signal: AbortSignal.timeout(600000) // 10Î∂Ñ ÌÉÄÏûÑÏïÑÏõÉÏúºÎ°ú Ï¶ùÍ∞Ä
      });

      if (!response.ok) {
        console.log('‚ùå ÏÑúÎ≤Ñ ÏùëÎãµ ÏóêÎü¨:', {
          status: response.status,
          statusText: response.statusText,
          url: response.url
        });
        
        let errorData;
        try {
          errorData = await response.json();
          console.log('üìã ÏóêÎü¨ ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:', errorData);
        } catch (parseError) {
          console.log('üìã ÏóêÎü¨ ÏùëÎãµ ÌååÏã± Ïã§Ìå®:', parseError);
          const errorText = await response.text();
          console.log('üìã ÏõêÎ≥∏ ÏóêÎü¨ ÌÖçÏä§Ìä∏:', errorText);
          errorData = { detail: errorText || 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò' };
        }
        
        throw new Error(`ÌÜµÌï© ÏóÖÎ°úÎìú Ïã§Ìå®: ${errorData.detail || errorData.message || 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`);
      }

      const result = await response.json();
      console.log('‚úÖ ÌÜµÌï© ÏóÖÎ°úÎìú ÏÑ±Í≥µ:', result);

      // Î∂ÑÏÑù Í≤∞Í≥º ÏÉùÏÑ±
      const analysisResult = {
        documentType: result.data.uploaded_documents.join(' + '),
        fileName: [resumeFile?.name, coverLetterFile?.name, portfolioFile?.name].filter(Boolean).join(', '),
        analysisDate: new Date().toLocaleString(),
        processingTime: 0,
        extractedTextLength: 0,
        analysisResult: result.data.results,
        uploadResults: Object.entries(result.data.results).map(([type, data]) => ({
          type: type === 'resume' ? 'resume' : type === 'cover_letter' ? 'cover_letter' : 'portfolio',
          result: data
        })),
        applicant: result.data.results.resume?.applicant || result.data.results.cover_letter?.applicant || result.data.results.portfolio?.applicant || null
      };

      setAnalysisResult(analysisResult);
      setIsAnalyzing(false);

      // ÏÑ±Í≥µ Î©îÏãúÏßÄ
      const uploadedDocs = result.data.uploaded_documents;
      const successMessage = uploadedDocs.length > 1 
        ? `${uploadedDocs.join(', ')} Î¨∏ÏÑúÎì§Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏóÖÎ°úÎìúÎêòÏóàÏäµÎãàÎã§!\n\nÏßÄÏõêÏûê: ${analysisResult.applicant?.name || 'N/A'}`
        : `${uploadedDocs[0] === 'resume' ? 'Ïù¥Î†•ÏÑú' : uploadedDocs[0] === 'cover_letter' ? 'ÏûêÍ∏∞ÏÜåÍ∞úÏÑú' : 'Ìè¨Ìä∏Ìè¥Î¶¨Ïò§'}Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏóÖÎ°úÎìúÎêòÏóàÏäµÎãàÎã§!\n\nÏßÄÏõêÏûê: ${analysisResult.applicant?.name || 'N/A'}`;
      
      alert(successMessage);
      
      // ÏßÄÏõêÏûê Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
      loadApplicants();
      
    } catch (error) {
      console.error('‚ùå ÌÜµÌï© Î¨∏ÏÑú ÏóÖÎ°úÎìú Ïã§Ìå®:', error);
      
      // ÏóêÎü¨ ÌÉÄÏûÖÎ≥Ñ ÏÉÅÏÑ∏ Î©îÏãúÏßÄ
      let errorMessage = 'Î¨∏ÏÑú ÏóÖÎ°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.';
      
      if (error.name === 'AbortError') {
        errorMessage = 'ÏöîÏ≤≠ ÏãúÍ∞ÑÏù¥ Ï¥àÍ≥ºÎêòÏóàÏäµÎãàÎã§. (10Î∂Ñ Ï†úÌïú)\n\nÎåÄÏö©Îüâ ÌååÏùºÏù¥ÎÇò Ïó¨Îü¨ ÌååÏùºÏùÑ ÎèôÏãúÏóê ÏóÖÎ°úÎìúÌï† Îïå ÏãúÍ∞ÑÏù¥ Ïò§Îûò Í±∏Î¶¥ Ïàò ÏûàÏäµÎãàÎã§.\n\nÌï¥Í≤∞ Î∞©Î≤ï:\n1. ÌååÏùº ÌÅ¨Í∏∞Î•º Ï§ÑÏó¨Î≥¥ÏÑ∏Ïöî (Í∞Å ÌååÏùº 10MB Ïù¥Ìïò Í∂åÏû•)\n2. Ìïú Î≤àÏóê ÌïòÎÇòÏî© ÌååÏùºÏùÑ ÏóÖÎ°úÎìúÌï¥Î≥¥ÏÑ∏Ïöî\n3. Îã§Ïãú ÏãúÎèÑÌï¥Î≥¥ÏÑ∏Ïöî';
      } else if (error.name === 'TypeError' && error.message.includes('fetch')) {
        errorMessage = 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.\n\nÏÑúÎ≤Ñ ÏÉÅÌÉúÎ•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.';
      } else if (error.message.includes('Failed to fetch')) {
        errorMessage = 'ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞Ìï† Ïàò ÏóÜÏäµÎãàÎã§.\n\nÎ∞±ÏóîÎìú ÏÑúÎ≤ÑÍ∞Ä Ïã§Ìñâ Ï§ëÏù∏ÏßÄ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.';
      } else {
        errorMessage = `Î¨∏ÏÑú ÏóÖÎ°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§:\n${error.message}`;
      }
      
      console.error('üîç ÏóêÎü¨ ÏÉÅÏÑ∏ Ï†ïÎ≥¥:', {
        name: error.name,
        message: error.message,
        stack: error.stack,
        timestamp: new Date().toISOString()
      });
      
      alert(errorMessage);
      setIsAnalyzing(false);
    }
  };

  // ÏÉÅÏÑ∏ Î∂ÑÏÑù Í≤∞Í≥ºÏóêÏÑú Ï†ïÎ≥¥ Ï∂îÏ∂úÌïòÎäî Ìó¨Ìçº Ìï®ÏàòÎì§
  const extractSkillsFromAnalysis = (analysisData, documentType) => {
    const skills = [];
    
    // Î∞±ÏóîÎìúÏóêÏÑú Ïù¥ÎØ∏ ÌïÑÌÑ∞ÎßÅÎêú Í≤∞Í≥ºÎßå Ï†ÑÎã¨ÎêòÎØÄÎ°ú, Ìï¥ÎãπÌïòÎäî ÏÑπÏÖòÎßå ÌôïÏù∏
    if (documentType === 'Ïù¥Î†•ÏÑú' && analysisData.resume_analysis) {
      if (analysisData.resume_analysis.tech_stack_clarity?.feedback) {
        skills.push(analysisData.resume_analysis.tech_stack_clarity.feedback);
      }
    } else if (documentType === 'ÏûêÍ∏∞ÏÜåÍ∞úÏÑú' && analysisData.cover_letter_analysis) {
      // ÏûêÍ∏∞ÏÜåÍ∞úÏÑú Í¥ÄÎ†® Í∏∞Ïà† Ïä§ÌÉù Ï†ïÎ≥¥Í∞Ä ÏûàÎã§Î©¥ Ï∂îÍ∞Ä
      if (analysisData.cover_letter_analysis.keyword_diversity?.feedback) {
        skills.push(analysisData.cover_letter_analysis.keyword_diversity.feedback);
      }
    } else if (documentType === 'Ìè¨Ìä∏Ìè¥Î¶¨Ïò§' && analysisData.portfolio_analysis) {
      if (analysisData.portfolio_analysis.tech_stack?.feedback) {
        skills.push(analysisData.portfolio_analysis.tech_stack.feedback);
      }
    }
    
    return skills.length > 0 ? skills : ['Í∏∞Ïà† Ïä§ÌÉù Ï†ïÎ≥¥Î•º Ï∂îÏ∂úÌï† Ïàò ÏóÜÏäµÎãàÎã§.'];
  };

  const extractExperienceFromAnalysis = (analysisData, documentType) => {
    const experiences = [];
    
    // Î∞±ÏóîÎìúÏóêÏÑú Ïù¥ÎØ∏ ÌïÑÌÑ∞ÎßÅÎêú Í≤∞Í≥ºÎßå Ï†ÑÎã¨ÎêòÎØÄÎ°ú, Ìï¥ÎãπÌïòÎäî ÏÑπÏÖòÎßå ÌôïÏù∏
    if (documentType === 'Ïù¥Î†•ÏÑú' && analysisData.resume_analysis) {
      if (analysisData.resume_analysis.experience_clarity?.feedback) {
        experiences.push(analysisData.resume_analysis.experience_clarity.feedback);
      }
      if (analysisData.resume_analysis.achievement_metrics?.feedback) {
        experiences.push(analysisData.resume_analysis.achievement_metrics.feedback);
      }
    } else if (documentType === 'ÏûêÍ∏∞ÏÜåÍ∞úÏÑú' && analysisData.cover_letter_analysis) {
      if (analysisData.cover_letter_analysis.unique_experience?.feedback) {
        experiences.push(analysisData.cover_letter_analysis.unique_experience.feedback);
      }
    } else if (documentType === 'Ìè¨Ìä∏Ìè¥Î¶¨Ïò§' && analysisData.portfolio_analysis) {
      if (analysisData.portfolio_analysis.personal_contribution?.feedback) {
        experiences.push(analysisData.portfolio_analysis.personal_contribution.feedback);
      }
    }
    
    return experiences.length > 0 ? experiences.join(' ') : 'Í≤ΩÎ†• Ï†ïÎ≥¥Î•º Ï∂îÏ∂úÌï† Ïàò ÏóÜÏäµÎãàÎã§.';
  };

  const extractEducationFromAnalysis = (analysisData, documentType) => {
    // Î∞±ÏóîÎìúÏóêÏÑú Ïù¥ÎØ∏ ÌïÑÌÑ∞ÎßÅÎêú Í≤∞Í≥ºÎßå Ï†ÑÎã¨ÎêòÎØÄÎ°ú, Ìï¥ÎãπÌïòÎäî ÏÑπÏÖòÎßå ÌôïÏù∏
    if (documentType === 'Ïù¥Î†•ÏÑú' && analysisData.resume_analysis?.basic_info_completeness?.feedback) {
      return analysisData.resume_analysis.basic_info_completeness.feedback;
    } else if (documentType === 'ÏûêÍ∏∞ÏÜåÍ∞úÏÑú' && analysisData.cover_letter_analysis?.job_understanding?.feedback) {
      return analysisData.cover_letter_analysis.job_understanding.feedback;
    } else if (documentType === 'Ìè¨Ìä∏Ìè¥Î¶¨Ïò§' && analysisData.portfolio_analysis?.project_overview?.feedback) {
      return analysisData.portfolio_analysis.project_overview.feedback;
    }
    return 'ÌïôÎ†• Ï†ïÎ≥¥Î•º Ï∂îÏ∂úÌï† Ïàò ÏóÜÏäµÎãàÎã§.';
  };

  const extractRecommendationsFromAnalysis = (analysisData, documentType) => {
    // ÏÑ†ÌÉùÌïú Ìï≠Î™©Ïóê ÎåÄÌïú ÏöîÏïΩ Ï†ïÎ≥¥ Î∞òÌôò
    if (documentType === 'Ïù¥Î†•ÏÑú' && analysisData.resume_analysis) {
      const itemCount = Object.keys(analysisData.resume_analysis).length;
      const totalScore = analysisData.overall_summary.total_score;
      return [`Ïù¥Î†•ÏÑú Î∂ÑÏÑù ÏôÑÎ£å: Ï¥ù ${itemCount}Í∞ú Ìï≠Î™© Î∂ÑÏÑù, ÌèâÍ∑† Ï†êÏàò ${totalScore}/10Ï†ê`];
    } else if (documentType === 'ÏûêÍ∏∞ÏÜåÍ∞úÏÑú' && analysisData.cover_letter_analysis) {
      const itemCount = Object.keys(analysisData.cover_letter_analysis).length;
      const totalScore = analysisData.overall_summary.total_score;
      return [`ÏûêÍ∏∞ÏÜåÍ∞úÏÑú Î∂ÑÏÑù ÏôÑÎ£å: Ï¥ù ${itemCount}Í∞ú Ìï≠Î™© Î∂ÑÏÑù, ÌèâÍ∑† Ï†êÏàò ${totalScore}/10Ï†ê`];
    } else if (documentType === 'Ìè¨Ìä∏Ìè¥Î¶¨Ïò§' && analysisData.portfolio_analysis) {
      const itemCount = Object.keys(analysisData.portfolio_analysis).length;
      const totalScore = analysisData.overall_summary.total_score;
      return [`Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Î∂ÑÏÑù ÏôÑÎ£å: Ï¥ù ${itemCount}Í∞ú Ìï≠Î™© Î∂ÑÏÑù, ÌèâÍ∑† Ï†êÏàò ${totalScore}/10Ï†ê`];
    }
    
    return ['Î¨∏ÏÑú Î∂ÑÏÑùÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.'];
  };

  return (
    <Container>
      <Header>
        <HeaderContent>
          <HeaderLeft>
            <Title>ÏßÄÏõêÏûê Í¥ÄÎ¶¨</Title>
            <Subtitle>Ï±ÑÏö© Í≥µÍ≥†Î≥Ñ ÏßÄÏõêÏûê ÌòÑÌô©ÏùÑ Í¥ÄÎ¶¨ÌïòÍ≥† Í≤ÄÌÜ†ÌïòÏÑ∏Ïöî</Subtitle>
          </HeaderLeft>
          <HeaderRight>
            <NewResumeButton onClick={handleResumeModalOpen}>
              <FiFileText size={16} />
              ÏÉà ÏßÄÏõêÏûê Îì±Î°ù
            </NewResumeButton>
            <NewResumeButton onClick={() => window.open('/pdf-ocr', '_blank')} style={{ marginLeft: '10px', backgroundColor: '#8B5CF6' }}>
              <FiCamera size={16} />
              PDF OCR
            </NewResumeButton>
          </HeaderRight>
        </HeaderContent>
        {/* Î°úÎî© ÏÉÅÌÉú ÌëúÏãú */}
        {isLoading && (
          <LoadingOverlay>
            <LoadingSpinner>
              <div className="spinner"></div>
              <span>Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</span>
            </LoadingSpinner>
          </LoadingOverlay>
        )}
      </Header>

      <StatsGrid>
        <StatCard
          key={`total-${stats.total}`}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.05 }}
        >
          <StatValue
            key={stats.total}
            initial={{ scale: 1 }}
            animate={{ scale: [1, 1.02, 1] }}
            transition={{ duration: 0.1 }}
          >
            {stats.total}
          </StatValue>
          <StatLabel>Ï¥ù ÏßÄÏõêÏûê</StatLabel>
        </StatCard>
        <StatCard
          key={`passed-${stats.passed}`}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
        >
          <StatValue
            key={stats.passed}
            initial={{ scale: 1 }}
            animate={{ scale: [1, 1.02, 1] }}
            transition={{ duration: 0.1 }}
          >
            {stats.passed}
          </StatValue>
          <StatLabel>ÏÑúÎ•ò Ìï©Í≤©</StatLabel>
        </StatCard>
                 <StatCard
           key={`waiting-${stats.waiting}`}
           initial={{ opacity: 0, y: 20 }}
           animate={{ opacity: 1, y: 0 }}
           transition={{ delay: 0.15 }}
         >
           <StatValue
             key={stats.waiting}
             initial={{ scale: 1 }}
             animate={{ scale: [1, 1.02, 1] }}
             transition={{ duration: 0.1 }}
           >
             {stats.waiting}
           </StatValue>
           <StatLabel>Î≥¥Î•ò</StatLabel>
         </StatCard>
        <StatCard
          key={`rejected-${stats.rejected}`}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
        >
          <StatValue
            key={stats.rejected}
            initial={{ scale: 1 }}
            animate={{ scale: [1, 1.02, 1] }}
            transition={{ duration: 0.1 }}
          >
            {stats.rejected}
          </StatValue>
          <StatLabel>ÏÑúÎ•ò Î∂àÌï©Í≤©</StatLabel>
        </StatCard>
      </StatsGrid>

      <SearchBar>
        <SearchSection>
          <SearchInput
            type="text"
            placeholder={hasActiveFilters ? getFilterStatusText() : "ÏßÄÏõêÏûê Ïù¥Î¶Ñ,ÏßÅÎ¨¥,Í∏∞Ïà†Ïä§ÌÉùÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"}
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <FilterButton onClick={handleFilterClick} hasActiveFilters={hasActiveFilters}>
            <FiFilter size={16} />
            ÌïÑÌÑ∞ {hasActiveFilters && <FilterBadge>{selectedJobs.length + selectedExperience.length + (filterStatus !== 'Ï†ÑÏ≤¥' ? 1 : 0)}</FilterBadge>}
          </FilterButton>
        </SearchSection>
        <ViewModeSection>
                              <ViewModeButton
                      active={viewMode === 'grid'}
                      onClick={() => handleViewModeChange('grid')}
                    >
                      <FiGrid size={14} />
                      Í∑∏Î¶¨Îìú
                    </ViewModeButton>
                    <ViewModeButton
                      active={viewMode === 'board'}
                      onClick={() => handleViewModeChange('board')}
                    >
                      <FiList size={14} />
                      Í≤åÏãúÌåê
                    </ViewModeButton>
        </ViewModeSection>
      </SearchBar>

      {/* Í≤åÏãúÌåê Î≥¥Í∏∞ Ìó§Îçî */}
      {viewMode === 'board' && (
        <>
          {/* Í≥†Ï†ïÎêú Ïï°ÏÖò Î∞î */}
          <FixedActionBar>
            <SelectionInfo>
              <FiCheck size={14} />
              {selectedApplicants.length}Í∞ú ÏÑ†ÌÉùÎê®
            </SelectionInfo>
            <ActionButtonsGroup>
              <FixedPassButton
                onClick={() => handleBulkStatusUpdate('ÏÑúÎ•òÌï©Í≤©')}
                disabled={selectedApplicants.length === 0}
              >
                <FiCheck size={12} />
                Ìï©Í≤©
              </FixedPassButton>
              <FixedPendingButton
                onClick={() => handleBulkStatusUpdate('Î≥¥Î•ò')}
                disabled={selectedApplicants.length === 0}
              >
                <FiClock size={12} />
                Î≥¥Î•ò
              </FixedPendingButton>
              <FixedRejectButton
                onClick={() => handleBulkStatusUpdate('ÏÑúÎ•òÎ∂àÌï©Í≤©')}
                disabled={selectedApplicants.length === 0}
              >
                <FiX size={12} />
                Î∂àÌï©Í≤©
              </FixedRejectButton>
            </ActionButtonsGroup>
          </FixedActionBar>
          
          <HeaderRowBoard>
            <HeaderCheckbox>
              <CheckboxInput
                type="checkbox"
                checked={selectAll}
                onChange={handleSelectAll}
              />
            </HeaderCheckbox>
            <HeaderAvatar></HeaderAvatar>
            <HeaderName>Ïù¥Î¶Ñ</HeaderName>
            <HeaderPosition>ÏßÅÎ¨¥</HeaderPosition>
            <HeaderEmail>Ïù¥Î©îÏùº</HeaderEmail>
            <HeaderPhone>Ï†ÑÌôîÎ≤àÌò∏</HeaderPhone>
            <HeaderSkills>Í∏∞Ïà†Ïä§ÌÉù</HeaderSkills>
            <HeaderDate>ÏßÄÏõêÏùº</HeaderDate>
            <HeaderRanks>Í∞Å Ìï≠Î™©Î≥Ñ Îì±Ïàò</HeaderRanks>
            <HeaderActions>ÏÉÅÌÉú</HeaderActions>
          </HeaderRowBoard>
        </>
      )}

      {viewMode === 'grid' ? (
        <ApplicantsGrid viewMode={viewMode}>
          {paginatedApplicants.length > 0 ? (
            paginatedApplicants.map((applicant, index) => (
              <MemoizedApplicantCard
                key={applicant.id}
                applicant={applicant}
                onCardClick={handleCardClick}
                onStatusUpdate={handleUpdateStatus}
                getStatusText={getStatusText}
              />
            ))
          ) : (
            <NoResultsMessage>
              <FiSearch size={48} />
              <h3>Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§</h3>
              <p>Îã§Î•∏ Í≤ÄÏÉâÏñ¥ÎÇò ÌïÑÌÑ∞ Ï°∞Í±¥ÏùÑ ÏãúÎèÑÌï¥Î≥¥ÏÑ∏Ïöî.</p>
            </NoResultsMessage>
          )}
        </ApplicantsGrid>
      ) : (
        <ApplicantsBoard>
            {paginatedApplicants.length > 0 ? (
              paginatedApplicants.map((applicant, index) => (
                <ApplicantCardBoard
                  key={applicant.id}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.05, duration: 0.1 }}
                  onClick={() => handleCardClick(applicant)}
                  onMouseEnter={() => setHoveredApplicant(applicant.id)}
                  onMouseLeave={() => setHoveredApplicant(null)}
                >
                  <ApplicantHeaderBoard>
                    <ApplicantCheckbox onClick={(e) => e.stopPropagation()}>
                      <CheckboxInput
                        type="checkbox"
                        checked={selectedApplicants.includes(applicant.id)}
                        onChange={(e) => {
                          e.stopPropagation();
                          handleSelectApplicant(applicant.id);
                        }}
                      />
                    </ApplicantCheckbox>
                    <ApplicantInfoBoard>
                      <AiSuitabilityAvatarBoard percentage={applicant.aiSuitability}>
                        {applicant.aiSuitability}%
                      </AiSuitabilityAvatarBoard>
                      <ApplicantDetailsBoard>
                        <ApplicantNameBoard>{applicant.name}</ApplicantNameBoard>
                        <ApplicantPositionBoard>{applicant.position}</ApplicantPositionBoard>
                      </ApplicantDetailsBoard>
                    </ApplicantInfoBoard>
                    <ApplicantEmailBoard>
                      <ContactItem>
                        <FiMail size={10} />
                        {applicant.email}
                      </ContactItem>
                    </ApplicantEmailBoard>
                    <ApplicantPhoneBoard>
                      <ContactItem>
                        <FiPhone size={10} />
                        {applicant.phone}
                      </ContactItem>
                    </ApplicantPhoneBoard>
                    <ApplicantSkillsBoard>
                      {(applicant.skills || '').split(',').slice(0, 3).map((skill, skillIndex) => (
                        <SkillTagBoard key={skillIndex}>
                          {skill.trim()}
                        </SkillTagBoard>
                      ))}
                      {applicant.skills.length > 3 && (
                        <SkillTagBoard>+{applicant.skills.length - 3}</SkillTagBoard>
                      )}
                    </ApplicantSkillsBoard>
                    <ApplicantDateBoard>{applicant.appliedDate}</ApplicantDateBoard>
                    <ApplicantRanksBoard>
                      <RankItem>
                        <span>Ïù¥Î†•ÏÑú</span>
                        <RankBadge rank={applicant.ranks?.resume || 0}>
                          {applicant.ranks?.resume || 0}
                        </RankBadge>
                      </RankItem>
                      <RankItem>
                        <span>ÏûêÏÜåÏÑú</span>
                        <RankBadge rank={applicant.ranks?.coverLetter || 0}>
                          {applicant.ranks?.coverLetter || 0}
                        </RankBadge>
                      </RankItem>
                      <RankItem>
                        <span>Ìè¨Ìè¥</span>
                        <RankBadge rank={applicant.ranks?.portfolio || 0}>
                          {applicant.ranks?.portfolio || 0}
                        </RankBadge>
                      </RankItem>
                      <RankItem>
                        <span>Ï¥ùÏ†ê</span>
                        <RankBadge rank={applicant.ranks?.total || 0}>
                          {applicant.ranks?.total || 0}
                        </RankBadge>
                      </RankItem>
                    </ApplicantRanksBoard>
                    {applicant.status !== 'ÏßÄÏõê' && (
                      <StatusColumnWrapper>
                                              <StatusBadge 
                        status={applicant.status}
                        initial={{ opacity: 0, scale: 0.8 }}
                        animate={{ opacity: 1, scale: 1 }}
                        transition={{ duration: 0.08, ease: "easeOut" }}
                      >
                        {getStatusText(applicant.status)}
                      </StatusBadge>
                      </StatusColumnWrapper>
                    )}
                  </ApplicantHeaderBoard>
                </ApplicantCardBoard>
              ))
            ) : (
              <NoResultsMessage>
                <FiSearch size={48} />
                <h3>Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§</h3>
                <p>Îã§Î•∏ Í≤ÄÏÉâÏñ¥ÎÇò ÌïÑÌÑ∞ Ï°∞Í±¥ÏùÑ ÏãúÎèÑÌï¥Î≥¥ÏÑ∏Ïöî.</p>
              </NoResultsMessage>
            )}
          </ApplicantsBoard>
        )}

      {/* Î¨¥Ìïú Ïä§ÌÅ¨Î°§ Î°úÎî© */}
      {hasMore && !isLoading && (
        <LoadMoreButton onClick={handleLoadMore}>
          Îçî ÎßéÏùÄ ÏßÄÏõêÏûê Î≥¥Í∏∞
        </LoadMoreButton>
      )}

      {/* Îçî Ïù¥ÏÉÅ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏùÑ Îïå */}
      {!hasMore && paginatedApplicants.length > 0 && (
        <EndMessage>
          Î™®Îì† ÏßÄÏõêÏûêÎ•º Î∂àÎü¨ÏôîÏäµÎãàÎã§.
        </EndMessage>
      )}

      {/* ÏßÄÏõêÏûê ÏÉÅÏÑ∏ Î™®Îã¨ */}
      <AnimatePresence>
        {isModalOpen && selectedApplicant && (
          <ModalOverlay
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={handleCloseModal}
          >
            <ModalContent
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              onClick={(e) => e.stopPropagation()}
            >
              <ModalHeader>
                <ModalTitle>ÏßÄÏõêÏûê ÏÉÅÏÑ∏ Ï†ïÎ≥¥</ModalTitle>
                <CloseButton onClick={handleCloseModal}>&times;</CloseButton>
              </ModalHeader>

              <ProfileSection>
                <SectionTitle>
                  <FiUser size={20} />
                  Í∏∞Î≥∏ Ï†ïÎ≥¥
                </SectionTitle>
                <ProfileGrid>
                  <ProfileItem>
                    <ProfileLabel>Ïù¥Î¶Ñ</ProfileLabel>
                    <ProfileValue>{selectedApplicant.name}</ProfileValue>
                  </ProfileItem>
                  <ProfileItem>
                    <ProfileLabel>Í≤ΩÎ†•</ProfileLabel>
                    <ProfileValue>{selectedApplicant.experience}</ProfileValue>
                  </ProfileItem>
                  <ProfileItem>
                    <ProfileLabel>Ìù¨ÎßùÎ∂ÄÏÑú</ProfileLabel>
                    <ProfileValue>{selectedApplicant.department}</ProfileValue>
                  </ProfileItem>
                  <ProfileItem>
                    <ProfileLabel>Ìù¨ÎßùÏßÅÏ±Ö</ProfileLabel>
                    <ProfileValue>{selectedApplicant.position}</ProfileValue>
                  </ProfileItem>
                </ProfileGrid>
              </ProfileSection>

              <SkillsSection>
                <SkillsTitle>
                  <FiCode size={20} />
                  Í∏∞Ïà†Ïä§ÌÉù
                </SkillsTitle>
                <SkillsGrid>
                  {(selectedApplicant.skills || '').split(',').map((skill, index) => (
                    <SkillTag key={index}>
                      {skill.trim()}
                    </SkillTag>
                  ))}
                </SkillsGrid>
              </SkillsSection>

              <SummarySection>
                <SummaryTitle>
                  <FiFile size={20} />
                  AI Î∂ÑÏÑù ÏöîÏïΩ
                </SummaryTitle>
                
                {selectedApplicant.analysisScore && (
                  <AnalysisScoreDisplay>
                    <AnalysisScoreCircle>
                      {selectedApplicant.analysisScore}
                    </AnalysisScoreCircle>
                    <AnalysisScoreInfo>
                      <AnalysisScoreLabel>AI Î∂ÑÏÑù Ï†êÏàò</AnalysisScoreLabel>
                      <AnalysisScoreValue>{selectedApplicant.analysisScore}Ï†ê</AnalysisScoreValue>
                    </AnalysisScoreInfo>
                  </AnalysisScoreDisplay>
                )}
                
                <SummaryText>
                  {selectedApplicant.summary}
                </SummaryText>
              </SummarySection>

              {/* Ïú†ÏÇ¨ Ïù∏Ïû¨ Ï∂îÏ≤ú ÏÑπÏÖò */}
              <SimilarCandidatesSection>
                <SimilarCandidatesTitle>
                  <FiUsers size={20} />
                  Ïú†ÏÇ¨ Ïù∏Ïû¨ Ï∂îÏ≤ú
                </SimilarCandidatesTitle>
                
                {similarCandidates.isLoading && (
                  <SimilarCandidatesLoading>
                    <SimilarCandidatesSpinner />
                    <div>Ïú†ÏÇ¨ Ïù∏Ïû¨ Î∂ÑÏÑù Ï§ëÏûÖÎãàÎã§...</div>
                  </SimilarCandidatesLoading>
                )}

                {similarCandidates.data && similarCandidates.data.length > 0 && (
                  <SimilarCandidatesList>
                    {similarCandidates.data.map((candidate, index) => (
                      <SimilarCandidateItem key={candidate.applicant?.id || index}>
                        <SimilarCandidateInfo>
                          <SimilarCandidateName>{candidate.applicant?.name || 'Ïù¥Î¶Ñ ÏóÜÏùå'}</SimilarCandidateName>
                          <SimilarCandidateDetails>
                            {candidate.applicant?.position} | {candidate.applicant?.experience}
                          </SimilarCandidateDetails>
                          <SimilarCandidateScore>
                            Ïú†ÏÇ¨ÎèÑ: {(candidate.final_score * 100).toFixed(1)}%
                            <SimilarCandidateScoreDetail>
                              (Î≤°ÌÑ∞: {(candidate.vector_score * 100).toFixed(1)}%, ÌÇ§ÏõåÎìú: {(candidate.keyword_score * 100).toFixed(1)}%)
                            </SimilarCandidateScoreDetail>
                          </SimilarCandidateScore>
                          <SimilarCandidateMethod>
                            Í≤ÄÏÉâÎ∞©Î≤ï: {candidate.search_methods?.join(', ') || 'N/A'}
                          </SimilarCandidateMethod>
                        </SimilarCandidateInfo>
                        <SimilarCandidateActions>
                          <SimilarCandidateButton 
                            onClick={() => handleViewSimilarCandidate(candidate.applicant)}
                          >
                            ÏÉÅÏÑ∏Î≥¥Í∏∞
                          </SimilarCandidateButton>
                        </SimilarCandidateActions>
                      </SimilarCandidateItem>
                    ))}
                  </SimilarCandidatesList>
                )}

                {similarCandidates.error && (
                  <SimilarCandidatesError>
                    Ïú†ÏÇ¨ Ïù∏Ïû¨ Í≤ÄÏÉâ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {similarCandidates.error}
                  </SimilarCandidatesError>
                )}

                {similarCandidates.data && similarCandidates.data.length === 0 && !similarCandidates.isLoading && (
                  <SimilarCandidatesEmpty>
                    Ïú†ÏÇ¨Ìïú Ïù∏Ïû¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.
                  </SimilarCandidatesEmpty>
                )}
              </SimilarCandidatesSection>

              <DocumentButtons>
                <DocumentButton onClick={() => handleDocumentClick('resume', selectedApplicant)}>
                  <FiFileText size={16} />
                  Ïù¥Î†•ÏÑú
                </DocumentButton>
                <DocumentButton onClick={() => handleDocumentClick('coverLetter', selectedApplicant)}>
                  <FiMessageSquare size={16} />
                  ÏûêÏÜåÏÑú
                </DocumentButton>
                <DocumentButton onClick={() => handleDocumentClick('portfolio', selectedApplicant)}>
                  <FiCode size={16} />
                  Ìè¨Ìä∏Ìè¥Î¶¨Ïò§
                </DocumentButton>
              </DocumentButtons>

              <DeleteButton onClick={() => handleDeleteApplicant(selectedApplicant.id)}>
                <FiX size={16} />
                ÏßÄÏõêÏûê ÏÇ≠Ï†ú
              </DeleteButton>
            </ModalContent>
          </ModalOverlay>
        )}
      </AnimatePresence>

      {/* Î¨∏ÏÑú Î™®Îã¨ */}
      <AnimatePresence>
        {documentModal.isOpen && documentModal.applicant && (
          <DocumentModalOverlay
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={handleCloseDocumentModal}
          >
            <DocumentModalContent
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              onClick={(e) => e.stopPropagation()}
            >
              <DocumentModalHeader>
                <DocumentModalTitle>
                  {documentModal.type === 'resume' && 'Ïù¥Î†•ÏÑú'}
                  {documentModal.type === 'coverLetter' && 'ÏûêÏÜåÏÑú'}
                  {documentModal.type === 'portfolio' && 'Ìè¨Ìä∏Ìè¥Î¶¨Ïò§'}
                  - {documentModal.applicant.name}
                </DocumentModalTitle>
                <DocumentHeaderActions>
                  <DocumentOriginalButton onClick={handleOriginalClick}>
                    {documentModal.isOriginal ? 'ÏöîÏïΩÎ≥¥Í∏∞' : 'ÏõêÎ≥∏Î≥¥Í∏∞'}
                  </DocumentOriginalButton>
                  <DocumentCloseButton onClick={handleCloseDocumentModal}>&times;</DocumentCloseButton>
                </DocumentHeaderActions>
              </DocumentModalHeader>

              <DocumentContent>
                {/* Ìè¨Ìä∏Ìè¥Î¶¨Ïò§: ÏÑ†ÌÉù ÌôîÎ©¥ */}
                {documentModal.type === 'portfolio' && portfolioView === 'select' && (
                  <>
                    <DocumentSection>
                      <DocumentSectionTitle>Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏöîÏïΩ Î∞©Î≤ï ÏÑ†ÌÉù</DocumentSectionTitle>
                      <SelectionGrid>
                        <SelectionCard
                          whileHover={{ scale: 1.02 }}
                          whileTap={{ scale: 0.98 }}
                          onClick={() => setPortfolioView('github')}
                        >
                          <SelectionIcon className="github">
                            <FiGitBranch />
                          </SelectionIcon>
                          <SelectionTitle>ÍπÉÌóô ÏöîÏïΩ</SelectionTitle>
                          <SelectionDesc>GitHub URL/ÏïÑÏù¥ÎîîÎ°ú Î†àÌè¨ Î∂ÑÏÑù ÏöîÏïΩ Î≥¥Í∏∞</SelectionDesc>
                        </SelectionCard>
                        <SelectionCard
                          whileHover={{ scale: 1.02 }}
                          whileTap={{ scale: 0.98 }}
                          onClick={() => {
                            console.log('Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Î≤ÑÌäº ÌÅ¥Î¶≠:', documentModal.applicant);
                            if (documentModal.applicant && documentModal.applicant._id) {
                              setPortfolioView('portfolio');
                              loadPortfolioData(documentModal.applicant._id);
                            } else {
                              console.error('ÏßÄÏõêÏûê IDÍ∞Ä ÏóÜÏäµÎãàÎã§:', documentModal.applicant);
                              alert('ÏßÄÏõêÏûê Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
                            }
                          }}
                        >
                          <SelectionIcon className="portfolio">
                            <FiCode />
                          </SelectionIcon>
                          <SelectionTitle>Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏöîÏïΩ</SelectionTitle>
                          <SelectionDesc>Îì±Î°ùÎêú Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Ï†ïÎ≥¥ Í∏∞Î∞ò ÏöîÏïΩ Î≥¥Í∏∞</SelectionDesc>
                        </SelectionCard>
                      </SelectionGrid>
                    </DocumentSection>
                  </>
                )}

                {/* Ìè¨Ìä∏Ìè¥Î¶¨Ïò§: ÍπÉÌóô ÏöîÏïΩ ÌôîÎ©¥ */}
                {documentModal.type === 'portfolio' && portfolioView === 'github' && (
                  <>
                    <DocumentSection>
                      <DocumentSectionTitle>
                        <button 
                          onClick={() => setPortfolioView('select')} 
                          style={{ 
                            background: 'transparent', 
                            border: 'none', 
                            cursor: 'pointer', 
                            marginRight: 8, 
                            color: 'var(--text-secondary)'
                          }}
                          aria-label="Îí§Î°ú"
                        >
                          <FiArrowLeft />
                        </button>
                        ÍπÉÌóô ÏöîÏïΩ
                      </DocumentSectionTitle>
                      <GithubSummaryPanel />
                    </DocumentSection>
                  </>
                )}

                {/* Ìè¨Ìä∏Ìè¥Î¶¨Ïò§: Í∏∞Ï°¥ Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏÉÅÏÑ∏ */}
                {documentModal.type === 'portfolio' && portfolioView === 'portfolio' && (
                  <>
                    <DocumentSection>
                      <DocumentSectionTitle>
                        <button 
                          onClick={() => setPortfolioView('select')} 
                          style={{ 
                            background: 'transparent', 
                            border: 'none', 
                            cursor: 'pointer', 
                            marginRight: 8, 
                            color: 'var(--text-secondary)'
                          }}
                          aria-label="Îí§Î°ú"
                        >
                          <FiArrowLeft />
                        </button>
                        Ìè¨Ìä∏Ìè¥Î¶¨Ïò§
                      </DocumentSectionTitle>
                      {isLoadingPortfolio ? (
                        <div style={{ textAlign: 'center', padding: '40px 20px' }}>
                          <div>Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</div>
                        </div>
                      ) : (
                        <PortfolioSummaryPanel portfolio={portfolioData} />
                      )}
                    </DocumentSection>
                  </>
                )}

                {/* Ïù¥Î†•ÏÑú Í∏∞Ï°¥ Î°úÏßÅ */}
                {documentModal.type === 'resume' && documentModal.isOriginal && (
                  <>
                    <DocumentSection>
                      <DocumentSectionTitle>ÏßÄÏõêÏûê Í∏∞Î≥∏Ï†ïÎ≥¥</DocumentSectionTitle>
                      <DocumentGrid>
                        <DocumentCard>
                          <DocumentCardTitle>Ïù¥Î¶Ñ</DocumentCardTitle>
                          <DocumentCardText>{documentModal.applicant.name || 'N/A'}</DocumentCardText>
                        </DocumentCard>
                        <DocumentCard>
                          <DocumentCardTitle>ÏßÄÏõê ÏßÅÎ¨¥</DocumentCardTitle>
                          <DocumentCardText>{documentModal.applicant.position || 'N/A'}</DocumentCardText>
                        </DocumentCard>
                        <DocumentCard>
                          <DocumentCardTitle>Î∂ÄÏÑú</DocumentCardTitle>
                          <DocumentCardText>{documentModal.applicant.department || 'N/A'}</DocumentCardText>
                        </DocumentCard>
                        <DocumentCard>
                          <DocumentCardTitle>Í≤ΩÎ†•</DocumentCardTitle>
                          <DocumentCardText>{documentModal.applicant.experience || 'N/A'}</DocumentCardText>
                        </DocumentCard>
                        <DocumentCard>
                          <DocumentCardTitle>Í∏∞Ïà†Ïä§ÌÉù</DocumentCardTitle>
                          <DocumentCardText>{documentModal.applicant.skills || 'Ï†ïÎ≥¥ ÏóÜÏùå'}</DocumentCardText>
                        </DocumentCard>
                        <DocumentCard>
                          <DocumentCardTitle>ÏÉÅÌÉú</DocumentCardTitle>
                          <DocumentCardText>{getStatusText(documentModal.applicant.status)}</DocumentCardText>
                        </DocumentCard>
                      </DocumentGrid>
                    </DocumentSection>

                    <DocumentSection>
                      <DocumentSectionTitle>ÌèâÍ∞Ä Ï†ïÎ≥¥</DocumentSectionTitle>
                      <DocumentGrid>
                        <DocumentCard>
                          <DocumentCardTitle>ÏÑ±Ïû•Î∞∞Í≤Ω</DocumentCardTitle>
                          <DocumentCardText>{documentModal.applicant.growthBackground || 'N/A'}</DocumentCardText>
                        </DocumentCard>
                        <DocumentCard>
                          <DocumentCardTitle>ÏßÄÏõêÎèôÍ∏∞</DocumentCardTitle>
                          <DocumentCardText>{documentModal.applicant.motivation || 'N/A'}</DocumentCardText>
                        </DocumentCard>
                        <DocumentCard>
                          <DocumentCardTitle>Í≤ΩÎ†•ÏÇ¨Ìï≠</DocumentCardTitle>
                          <DocumentCardText>{documentModal.applicant.careerHistory || 'N/A'}</DocumentCardText>
                        </DocumentCard>
                        <DocumentCard>
                          <DocumentCardTitle>Ï¢ÖÌï© Ï†êÏàò</DocumentCardTitle>
                          <DocumentCardText>{documentModal.applicant.analysisScore || 0}Ï†ê</DocumentCardText>
                        </DocumentCard>
                        <DocumentCard>
                          <DocumentCardTitle>Î∂ÑÏÑù Í≤∞Í≥º</DocumentCardTitle>
                          <DocumentCardText>{documentModal.applicant.analysisResult || 'Î∂ÑÏÑù Í≤∞Í≥º ÏóÜÏùå'}</DocumentCardText>
                        </DocumentCard>
                        <DocumentCard>
                          <DocumentCardTitle>ÏßÄÏõêÏùºÏãú</DocumentCardTitle>
                          <DocumentCardText>{documentModal.applicant.created_at ? new Date(documentModal.applicant.created_at).toLocaleString() : 'N/A'}</DocumentCardText>
                        </DocumentCard>
                      </DocumentGrid>
                    </DocumentSection>
                  </>
                )}

                {/* ÏûêÏÜåÏÑú: cover_letters Ïª¨Î†âÏÖòÏóêÏÑú Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞ */}
                {documentModal.type === 'coverLetter' && documentModal.isOriginal && documentModal.documentData && (
                  <>
                    <DocumentSection>
                      <DocumentSectionTitle>ÏßÄÏõêÏûê Í∏∞Î≥∏Ï†ïÎ≥¥</DocumentSectionTitle>
                      <DocumentGrid>
                        <DocumentCard>
                          <DocumentCardTitle>Ïù¥Î¶Ñ</DocumentCardTitle>
                          <DocumentCardText>{documentModal.documentData.basic_info?.name || documentModal.applicant.name || 'N/A'}</DocumentCardText>
                        </DocumentCard>
                        <DocumentCard>
                          <DocumentCardTitle>ÏßÄÏõê ÏßÅÎ¨¥</DocumentCardTitle>
                          <DocumentCardText>{documentModal.documentData.basic_info?.position || documentModal.applicant.position || 'N/A'}</DocumentCardText>
                        </DocumentCard>
                        <DocumentCard>
                          <DocumentCardTitle>Î∂ÄÏÑú</DocumentCardTitle>
                          <DocumentCardText>{documentModal.documentData.basic_info?.department || documentModal.applicant.department || 'N/A'}</DocumentCardText>
                        </DocumentCard>
                        <DocumentCard>
                          <DocumentCardTitle>Í≤ΩÎ†•</DocumentCardTitle>
                          <DocumentCardText>{documentModal.documentData.basic_info?.experience || documentModal.applicant.experience || 'N/A'}</DocumentCardText>
                        </DocumentCard>
                        <DocumentCard>
                          <DocumentCardTitle>Í∏∞Ïà†Ïä§ÌÉù</DocumentCardTitle>
                          <DocumentCardText>{documentModal.documentData.keywords?.join(', ') || documentModal.applicant.skills || 'Ï†ïÎ≥¥ ÏóÜÏùå'}</DocumentCardText>
                        </DocumentCard>
                        <DocumentCard>
                          <DocumentCardTitle>ÏÉÅÌÉú</DocumentCardTitle>
                          <DocumentCardText>{getStatusText(documentModal.applicant.status)}</DocumentCardText>
                        </DocumentCard>
                      </DocumentGrid>
                    </DocumentSection>

                    <DocumentSection>
                      <DocumentSectionTitle>ÌèâÍ∞Ä Ï†ïÎ≥¥</DocumentSectionTitle>
                      <DocumentGrid>
                        <DocumentCard>
                          <DocumentCardTitle>ÏÑ±Ïû•Î∞∞Í≤Ω</DocumentCardTitle>
                          <DocumentCardText>{documentModal.documentData.basic_info?.growthBackground || documentModal.applicant.growthBackground || 'N/A'}</DocumentCardText>
                        </DocumentCard>
                        <DocumentCard>
                          <DocumentCardTitle>ÏßÄÏõêÎèôÍ∏∞</DocumentCardTitle>
                          <DocumentCardText>{documentModal.documentData.basic_info?.motivation || documentModal.applicant.motivation || 'N/A'}</DocumentCardText>
                        </DocumentCard>
                        <DocumentCard>
                          <DocumentCardTitle>Í≤ΩÎ†•ÏÇ¨Ìï≠</DocumentCardTitle>
                          <DocumentCardText>{documentModal.documentData.basic_info?.careerHistory || documentModal.applicant.careerHistory || 'N/A'}</DocumentCardText>
                        </DocumentCard>
                        <DocumentCard>
                          <DocumentCardTitle>Ï¢ÖÌï© Ï†êÏàò</DocumentCardTitle>
                          <DocumentCardText>{documentModal.documentData.basic_info?.analysisScore || documentModal.applicant.analysisScore || 0}Ï†ê</DocumentCardText>
                        </DocumentCard>
                        <DocumentCard>
                          <DocumentCardTitle>Î∂ÑÏÑù Í≤∞Í≥º</DocumentCardTitle>
                          <DocumentCardText>{documentModal.documentData.basic_info?.analysisResult || documentModal.applicant.analysisResult || 'Î∂ÑÏÑù Í≤∞Í≥º ÏóÜÏùå'}</DocumentCardText>
                        </DocumentCard>
                        <DocumentCard>
                          <DocumentCardTitle>ÏßÄÏõêÏùºÏãú</DocumentCardTitle>
                          <DocumentCardText>{documentModal.documentData.created_at ? new Date(documentModal.documentData.created_at).toLocaleString() : (documentModal.applicant.created_at ? new Date(documentModal.applicant.created_at).toLocaleString() : 'N/A')}</DocumentCardText>
                        </DocumentCard>
                      </DocumentGrid>
                    </DocumentSection>
                  </>
                )}

                {documentModal.type === 'resume' && !documentModal.isOriginal && documentModal.documentData && (
                  <DocumentSection>
                    <DocumentSectionTitle>Ïù¥Î†•ÏÑú ÎÇ¥Ïö©</DocumentSectionTitle>
                    <DocumentCard>
                      <DocumentCardText>
                        {documentModal.documentData.extracted_text || 'Ïù¥Î†•ÏÑú ÎÇ¥Ïö©ÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.'}
                      </DocumentCardText>
                    </DocumentCard>
                  </DocumentSection>
                )}

                {documentModal.type === 'coverLetter' && !documentModal.isOriginal && documentModal.documentData && (
                  <DocumentSection>
                    <DocumentSectionTitle>ÏûêÏÜåÏÑú ÎÇ¥Ïö©</DocumentSectionTitle>
                    <DocumentCard>
                      <DocumentCardText>
                        {documentModal.documentData.extracted_text || documentModal.documentData.content || 'ÏûêÏÜåÏÑú ÎÇ¥Ïö©ÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.'}
                      </DocumentCardText>
                    </DocumentCard>
                  </DocumentSection>
                )}

                {documentModal.type === 'coverLetter' && documentModal.documentData && (
                  <>
                    <DocumentSection>
                      <DocumentSectionTitle>ÏßÄÏõê ÎèôÍ∏∞</DocumentSectionTitle>
                      <DocumentText>{documentModal.documentData.extracted_text || documentModal.documentData.content || 'ÏûêÏÜåÏÑú ÎÇ¥Ïö©ÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.'}</DocumentText>
                    </DocumentSection>
                  </>
                )}

                {documentModal.type === 'portfolio' && documentModal.applicant.documents?.portfolio && (
                  <>
                    <DocumentSection>
                      <DocumentSectionTitle>ÌîÑÎ°úÏ†ùÌä∏</DocumentSectionTitle>
                      {(documentModal.applicant.documents.portfolio.projects || []).map((project, index) => (
                        <DocumentCard key={index}>
                          <DocumentCardTitle>{project.title}</DocumentCardTitle>
                          <DocumentCardText>{project.description}</DocumentCardText>
                          <DocumentCardText><strong>Í∏∞Ïà†Ïä§ÌÉù:</strong> {(project.technologies || []).join(', ')}</DocumentCardText>
                          <DocumentCardText><strong>Ï£ºÏöî Í∏∞Îä•:</strong></DocumentCardText>
                          <DocumentList>
                            {(project.features || []).map((feature, idx) => (
                              <DocumentListItem key={idx}>{feature}</DocumentListItem>
                            ))}
                          </DocumentList>
                          <DocumentCardText><strong>GitHub:</strong> <a href={project.github} target="_blank" rel="noopener noreferrer">{project.github}</a></DocumentCardText>
                          <DocumentCardText><strong>Demo:</strong> <a href={project.demo} target="_blank" rel="noopener noreferrer">{project.demo}</a></DocumentCardText>
                        </DocumentCard>
                      ))}
                    </DocumentSection>

                    <DocumentSection>
                      <DocumentSectionTitle>ÏÑ±Í≥º Î∞è ÏàòÏÉÅ</DocumentSectionTitle>
                      <DocumentList>
                        {(documentModal.applicant.documents.portfolio.achievements || []).map((achievement, index) => (
                          <DocumentListItem key={index}>{achievement}</DocumentListItem>
                        ))}
                      </DocumentList>
                    </DocumentSection>
                  </>
                )}

                {documentModal.type === 'coverLetter' && !documentModal.isOriginal && (
                  <>
                    {/* Ïú†ÏÇ¨ÎèÑ Ï≤¥ÌÅ¨ Í≤∞Í≥º ÏÑπÏÖò */}
                    <DocumentSection>
                      <DocumentSectionTitle>üîç Ïú†ÏÇ¨ÎèÑ Ï≤¥ÌÅ¨ Í≤∞Í≥º</DocumentSectionTitle>
                      
                      {documentModal.isLoadingSimilarity && (
                        <DocumentCard>
                          <DocumentCardText>
                            üìä Îã§Î•∏ {documentModal.type === 'resume' ? 'Ïù¥Î†•ÏÑú' : 'ÏûêÏÜåÏÑú'}Îì§Í≥ºÏùò Ïú†ÏÇ¨ÎèÑÎ•º Î∂ÑÏÑù Ï§ëÏûÖÎãàÎã§...
                          </DocumentCardText>
                        </DocumentCard>
                      )}

                      {!documentModal.isLoadingSimilarity && documentModal.similarityData && (
                        <>
                          {/* ÌÜµÍ≥Ñ Ï†ïÎ≥¥ */}
                          <DocumentCard>
                            <DocumentCardTitle>üìà Ïú†ÏÇ¨ÎèÑ Î∂ÑÏÑù ÌÜµÍ≥Ñ</DocumentCardTitle>
                            <DocumentGrid style={{display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: '10px'}}>
                              <div>
                                <strong>ÎπÑÍµê ÎåÄÏÉÅ:</strong> {documentModal.similarityData?.statistics?.total_compared || 0}Î™Ö
                              </div>
                              <div>
                                <strong>ÌèâÍ∑† Ïú†ÏÇ¨ÎèÑ:</strong> {((documentModal.similarityData?.statistics?.average_similarity || 0) * 100).toFixed(1)}%
                              </div>
                              <div>
                                <strong>ÎÜíÏùÄ Ïú†ÏÇ¨ÎèÑ:</strong> {documentModal.similarityData?.statistics?.high_similarity_count || 0}Î™Ö (70% Ïù¥ÏÉÅ)
                              </div>
                              <div>
                                <strong>Ï§ëÍ∞Ñ Ïú†ÏÇ¨ÎèÑ:</strong> {documentModal.similarityData?.statistics?.moderate_similarity_count || 0}Î™Ö (40-70%)
                              </div>
                            </DocumentGrid>
                          </DocumentCard>

                          {/* ÌëúÏ†à ÏúÑÌóòÎèÑ Î∂ÑÏÑù */}
                          {documentModal.similarityData?.plagiarism_analysis && documentModal.similarityData.plagiarism_analysis.success && (
                            <DocumentCard>
                              <DocumentCardTitle>‚ö†Ô∏è ÌëúÏ†à ÏúÑÌóòÎèÑ Î∂ÑÏÑù</DocumentCardTitle>
                              <div style={{
                                padding: '12px',
                                borderRadius: '8px',
                                backgroundColor: documentModal.similarityData?.plagiarism_analysis?.risk_level === 'HIGH' ? '#fff5f5' : 
                                                documentModal.similarityData?.plagiarism_analysis?.risk_level === 'MEDIUM' ? '#fffbf0' : '#f0fff4',
                                border: `2px solid ${documentModal.similarityData?.plagiarism_analysis?.risk_level === 'HIGH' ? '#ff4757' : 
                                                   documentModal.similarityData?.plagiarism_analysis?.risk_level === 'MEDIUM' ? '#ffa502' : '#2ed573'}`
                              }}>
                                <div style={{
                                  fontWeight: 'bold',
                                  marginBottom: '8px',
                                  color: documentModal.similarityData?.plagiarism_analysis?.risk_level === 'HIGH' ? '#ff4757' : 
                                        documentModal.similarityData?.plagiarism_analysis?.risk_level === 'MEDIUM' ? '#ffa502' : '#2ed573'
                                }}>
                                  ÏúÑÌóòÎèÑ: {documentModal.similarityData?.plagiarism_analysis?.risk_level || 'N/A'} 
                                  ({((documentModal.similarityData?.plagiarism_analysis?.risk_score || 0) * 100).toFixed(1)}%)
                                </div>
                                <div style={{fontSize: '14px', color: '#333', marginBottom: '8px', whiteSpace: 'pre-line'}}>
                                  {documentModal.similarityData?.plagiarism_analysis?.analysis || 'Î∂ÑÏÑù Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.'}
                                </div>
                                
                                {documentModal.similarityData?.plagiarism_analysis?.recommendations && 
                                 documentModal.similarityData.plagiarism_analysis.recommendations.length > 0 && (
                                  <div>
                                    <div style={{fontSize: '12px', fontWeight: 'bold', color: '#666', marginBottom: '4px'}}>
                                      Í∂åÏû•ÏÇ¨Ìï≠:
                                    </div>
                                    <ul style={{margin: '0', paddingLeft: '16px'}}>
                                      {documentModal.similarityData?.plagiarism_analysis?.recommendations?.map((rec, idx) => (
                                        <li key={idx} style={{fontSize: '12px', color: '#666', marginBottom: '2px'}}>
                                          {rec}
                                        </li>
                                      ))}
                                    </ul>
                                  </div>
                                )}
                              </div>
                            </DocumentCard>
                          )}

                          {/* ÏÉÅÏúÑ Ïú†ÏÇ¨ Ïù¥Î†•ÏÑúÎì§ */}
                          {documentModal.similarityData?.top_similar?.length > 0 && (
                            <DocumentCard>
                              <DocumentCardTitle>üéØ Í∞ÄÏû• Ïú†ÏÇ¨Ìïú ÏûêÏÜåÏÑú TOP 5</DocumentCardTitle>
                              {documentModal.similarityData?.top_similar?.map((similar, index) => (
                                <div key={similar.resume_id} style={{
                                  padding: '12px',
                                  margin: '8px 0',
                                  border: `2px solid ${similar.is_high_similarity ? '#ff4757' : similar.is_moderate_similarity ? '#ffa502' : '#2ed573'}`,
                                  borderRadius: '8px',
                                  backgroundColor: similar.is_high_similarity ? '#fff5f5' : similar.is_moderate_similarity ? '#fffbf0' : '#f0fff4',
                                  cursor: 'pointer',
                                  transition: 'all 0.2s ease'
                                }}
                                onClick={() => handleSimilarApplicantClick(similar)}
                                onMouseEnter={(e) => {
                                  e.target.style.transform = 'translateY(-2px)';
                                  e.target.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
                                }}
                                onMouseLeave={(e) => {
                                  e.target.style.transform = 'translateY(0)';
                                  e.target.style.boxShadow = 'none';
                                }}>
                                  <div style={{fontWeight: 'bold', marginBottom: '4px'}}>
                                    #{index + 1}. {similar.applicant_name} ({similar.position})
                                  </div>
                                  <div style={{fontSize: '14px', color: '#666'}}>
                                    Ï†ÑÏ≤¥ Ïú†ÏÇ¨ÎèÑ: <strong style={{color: similar.is_high_similarity ? '#ff4757' : similar.is_moderate_similarity ? '#ffa502' : '#2ed573'}}>
                                      {(similar.overall_similarity * 100).toFixed(1)}%
                                    </strong>
                                  </div>
                                  <div style={{fontSize: '12px', color: '#888', marginTop: '4px'}}>
                                    Ï†ÑÏ≤¥ Ïú†ÏÇ¨ÎèÑ: {(similar.overall_similarity * 100).toFixed(1)}%
                                  </div>
                                  
                                  {/* LLM Î∂ÑÏÑù Í≤∞Í≥º Ï∂îÍ∞Ä */}
                                  {similar.llm_analysis && similar.llm_analysis.success && (
                                    <div style={{
                                      marginTop: '8px',
                                      padding: '8px',
                                      backgroundColor: '#f0f8ff',
                                      borderLeft: '4px solid #4a90e2',
                                      borderRadius: '4px'
                                    }}>
                                      <div style={{fontSize: '11px', fontWeight: 'bold', color: '#4a90e2', marginBottom: '4px'}}>
                                        ü§ñ AI Î∂ÑÏÑù
                                      </div>
                                      <div style={{fontSize: '12px', color: '#333', lineHeight: '1.4', whiteSpace: 'pre-line'}}>
                                        {similar.llm_analysis.analysis}
                                      </div>
                                    </div>
                                  )}
                                  
                                  {similar.llm_analysis && !similar.llm_analysis.success && (
                                    <div style={{
                                      marginTop: '8px',
                                      padding: '8px',
                                      backgroundColor: '#fff0f0',
                                      borderLeft: '4px solid #e74c3c',
                                      borderRadius: '4px'
                                    }}>
                                      <div style={{fontSize: '11px', color: '#e74c3c'}}>
                                        AI Î∂ÑÏÑù Ïã§Ìå®: {similar.llm_analysis.error || 'Unknown error'}
                                      </div>
                                    </div>
                                  )}
                                </div>
                              ))}
                            </DocumentCard>
                          )}
                        </>
                      )}

                      {!documentModal.isLoadingSimilarity && !documentModal.similarityData && (
                        <DocumentCard>
                          <DocumentCardText>
                            Ïú†ÏÇ¨ÎèÑ Ï≤¥ÌÅ¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.
                          </DocumentCardText>
                        </DocumentCard>
                      )}
                    </DocumentSection>

                    {/* Í∏∞Ï°¥ ÏûêÏÜåÏÑú ÏöîÏïΩ ÏÑπÏÖò */}
                    {!documentModal.applicant.documents?.resume && (
                      <DocumentSection>
                        <DocumentSectionTitle>ÏûêÏÜåÏÑú ÏöîÏïΩ</DocumentSectionTitle>
                        <DocumentCard>
                          <DocumentCardText>
                            ÌòÑÏû¨ Ïù¥ ÏßÄÏõêÏûêÏùò ÏÉÅÏÑ∏ ÏûêÏÜåÏÑú Ï†ïÎ≥¥Îäî Îì±Î°ùÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.<br/>
                            <strong>ÏõêÎ≥∏Î≥¥Í∏∞</strong> Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÎ©¥ DBÏóê Ï†ÄÏû•Îêú ÏßÄÏõêÏûêÏùò Î™®Îì† Ï†ïÎ≥¥Î•º ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.
                          </DocumentCardText>
                        </DocumentCard>
                      </DocumentSection>
                    )}
                  </>
                )}
              </DocumentContent>
            </DocumentModalContent>
          </DocumentModalOverlay>
        )}
      </AnimatePresence>

      {/* ÌïÑÌÑ∞ Î™®Îã¨ */}
      <AnimatePresence>
        {filterModal && (
          <FilterModalOverlay
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={handleCloseFilterModal}
          >
            <FilterModalContent
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              onClick={(e) => e.stopPropagation()}
            >
              <FilterModalHeader>
                <FilterModalTitle>ÌïÑÌÑ∞</FilterModalTitle>
                <FilterCloseButton onClick={handleCloseFilterModal}>&times;</FilterCloseButton>
              </FilterModalHeader>

              <FilterGrid>
                <FilterColumn>
                  <FilterSection>
                    <FilterSectionTitle>ÏßÅÎ¨¥</FilterSectionTitle>
                    <CheckboxGroup>
                      <CheckboxItem>
                        <Checkbox
                          type="checkbox"
                          checked={selectedJobs.includes('ÌîÑÎ°†Ìä∏ÏóîÎìú')}
                          onChange={() => handleJobChange('ÌîÑÎ°†Ìä∏ÏóîÎìú')}
                        />
                        ÌîÑÎ°†Ìä∏ÏóîÎìú
                      </CheckboxItem>
                      <CheckboxItem>
                        <Checkbox
                          type="checkbox"
                          checked={selectedJobs.includes('ÌíÄÏä§ÌÉù')}
                          onChange={() => handleJobChange('ÌíÄÏä§ÌÉù')}
                        />
                        ÌíÄÏä§ÌÉù
                      </CheckboxItem>
                      <CheckboxItem>
                        <Checkbox
                          type="checkbox"
                          checked={selectedJobs.includes('PM')}
                          onChange={() => handleJobChange('PM')}
                        />
                        PM
                      </CheckboxItem>
                      <CheckboxItem>
                        <Checkbox
                          type="checkbox"
                          checked={selectedJobs.includes('DevOps')}
                          onChange={() => handleJobChange('DevOps')}
                        />
                        DevOps
                      </CheckboxItem>
                      <CheckboxItem>
                        <Checkbox
                          type="checkbox"
                          checked={selectedJobs.includes('Î∞±ÏóîÎìú')}
                          onChange={() => handleJobChange('Î∞±ÏóîÎìú')}
                        />
                        Î∞±ÏóîÎìú
                      </CheckboxItem>
                      <CheckboxItem>
                        <Checkbox
                          type="checkbox"
                          checked={selectedJobs.includes('Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù')}
                          onChange={() => handleJobChange('Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù')}
                        />
                        Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù
                      </CheckboxItem>
                      <CheckboxItem>
                        <Checkbox
                          type="checkbox"
                          checked={selectedJobs.includes('UI/UX')}
                          onChange={() => handleJobChange('UI/UX')}
                        />
                        UI/UX
                      </CheckboxItem>
                      <CheckboxItem>
                        <Checkbox
                          type="checkbox"
                          checked={selectedJobs.includes('QA')}
                          onChange={() => handleJobChange('QA')}
                        />
                        QA
                      </CheckboxItem>
                    </CheckboxGroup>
                  </FilterSection>
                </FilterColumn>

                <FilterColumn>
                  <FilterSection>
                    <FilterSectionTitle>Í≤ΩÎ†•</FilterSectionTitle>
                    <CheckboxGroup>
                      <CheckboxItem>
                        <Checkbox
                          type="checkbox"
                          checked={selectedExperience.includes('Ïã†ÏûÖ')}
                          onChange={() => handleExperienceChange('Ïã†ÏûÖ')}
                        />
                        Ïã†ÏûÖ
                      </CheckboxItem>
                      <CheckboxItem>
                        <Checkbox
                          type="checkbox"
                          checked={selectedExperience.includes('1-3ÎÖÑ')}
                          onChange={() => handleExperienceChange('1-3ÎÖÑ')}
                        />
                        1-3ÎÖÑ
                      </CheckboxItem>
                      <CheckboxItem>
                        <Checkbox
                          type="checkbox"
                          checked={selectedExperience.includes('3-5ÎÖÑ')}
                          onChange={() => handleExperienceChange('3-5ÎÖÑ')}
                        />
                        3-5ÎÖÑ
                      </CheckboxItem>
                      <CheckboxItem>
                        <Checkbox
                          type="checkbox"
                          checked={selectedExperience.includes('5ÎÖÑÏù¥ÏÉÅ')}
                          onChange={() => handleExperienceChange('5ÎÖÑÏù¥ÏÉÅ')}
                        />
                        5ÎÖÑÏù¥ÏÉÅ
                      </CheckboxItem>
                    </CheckboxGroup>
                  </FilterSection>
                </FilterColumn>
              </FilterGrid>

              <FilterButtonGroup>
                <ResetButton onClick={handleResetFilter}>
                  Ï¥àÍ∏∞Ìôî
                </ResetButton>
                <ApplyButton onClick={handleApplyFilter}>
                  Ï†ÅÏö©
                </ApplyButton>
              </FilterButtonGroup>
            </FilterModalContent>
          </FilterModalOverlay>
        )}
      </AnimatePresence>

      {/* ÏÉà Ïù¥Î†•ÏÑú Îì±Î°ù Î™®Îã¨ */}
      <AnimatePresence>
        {isResumeModalOpen && (
          <ResumeModalOverlay
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={handleResumeModalClose}
          >
            <ResumeModalContent
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              onClick={(e) => e.stopPropagation()}
            >
              <ResumeModalHeader>
                <ResumeModalTitle>ÏÉà ÏßÄÏõêÏûê Îì±Î°ù</ResumeModalTitle>
                <ResumeModalCloseButton onClick={handleResumeModalClose}>&times;</ResumeModalCloseButton>
              </ResumeModalHeader>

              <ResumeModalBody>
                <ResumeFormSection>
                  <ResumeFormTitle>Ïù¥Î†•ÏÑú ÏóÖÎ°úÎìú</ResumeFormTitle>
                  <DocumentUploadContainer>
                    <FileUploadArea
                      isDragOver={isDragOver}
                      onDragOver={handleDragOver}
                      onDragLeave={handleDragLeave}
                      onDrop={handleDrop}
                    >
                      <FileUploadInput
                        type="file"
                        accept=".pdf,.doc,.docx,.txt"
                        onChange={handleFileChange}
                        id="resume-file"
                      />
                      <FileUploadLabel htmlFor="resume-file">
                        {resumeFile ? (
                          <FileSelected>
                            <FiFile size={20} />
                            <span>{resumeFile.name}</span>
                          </FileSelected>
                        ) : (
                          <FileUploadPlaceholder>
                            {isDragOver ? (
                              <FiFile size={32} style={{ color: 'var(--primary-color)' }} />
                            ) : (
                              <FiFileText size={24} />
                            )}
                            <span>
                              {isDragOver 
                                ? 'ÌååÏùºÏùÑ Ïó¨Í∏∞Ïóê ÎÜìÏúºÏÑ∏Ïöî' 
                                : 'Ïù¥Î†•ÏÑú ÌååÏùºÏùÑ ÏÑ†ÌÉùÌïòÍ±∞ÎÇò ÎìúÎûòÍ∑∏ÌïòÏÑ∏Ïöî'
                              }
                            </span>
                            <small>PDF, DOC, DOCX, TXT ÌååÏùº ÏßÄÏõê</small>
                          </FileUploadPlaceholder>
                        )}
                      </FileUploadLabel>
                    </FileUploadArea>
                  </DocumentUploadContainer>
                </ResumeFormSection>

                <ResumeFormSection>
                  <ResumeFormTitle>ÏûêÍ∏∞ÏÜåÍ∞úÏÑú ÏóÖÎ°úÎìú</ResumeFormTitle>
                  <DocumentUploadContainer>
                    <FileUploadArea
                      isDragOver={isDragOver}
                      onDragOver={handleDragOver}
                      onDragLeave={handleDragLeave}
                      onDrop={handleDrop}
                    >
                      <FileUploadInput
                        type="file"
                        accept=".pdf,.doc,.docx,.txt"
                        onChange={handleCoverFileChange}
                        id="cover-file"
                      />
                      <FileUploadLabel htmlFor="cover-file">
                        {coverLetterFile ? (
                          <FileSelected>
                            <FiFile size={20} />
                            <span>{coverLetterFile.name}</span>
                          </FileSelected>
                        ) : (
                          <FileUploadPlaceholder>
                            {isDragOver ? (
                              <FiFile size={32} style={{ color: 'var(--primary-color)' }} />
                            ) : (
                              <FiFileText size={24} />
                            )}
                            <span>
                              {isDragOver 
                                ? 'ÌååÏùºÏùÑ Ïó¨Í∏∞Ïóê ÎÜìÏúºÏÑ∏Ïöî' 
                                : 'ÏûêÍ∏∞ÏÜåÍ∞úÏÑú ÌååÏùºÏùÑ ÏÑ†ÌÉùÌïòÍ±∞ÎÇò ÎìúÎûòÍ∑∏ÌïòÏÑ∏Ïöî'
                              }
                            </span>
                            <small>PDF, DOC, DOCX, TXT ÌååÏùº ÏßÄÏõê</small>
                          </FileUploadPlaceholder>
                        )}
                      </FileUploadLabel>
                    </FileUploadArea>
                  </DocumentUploadContainer>
                </ResumeFormSection>

                <ResumeFormSection>
                  <ResumeFormTitle>Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏóÖÎ°úÎìú</ResumeFormTitle>
                  <DocumentUploadContainer>
                    <FileUploadArea
                      isDragOver={isDragOver}
                      onDragOver={handleDragOver}
                      onDragLeave={handleDragLeave}
                      onDrop={handleDrop}
                    >
                      <FileUploadInput
                        type="file"
                        accept=".pdf"
                        onChange={handlePortfolioFileChange}
                        id="portfolio-file"
                      />
                      <FileUploadLabel htmlFor="portfolio-file">
                        {portfolioFile ? (
                          <FileSelected>
                            <FiFile size={20} />
                            <span>{portfolioFile.name}</span>
                          </FileSelected>
                        ) : (
                          <FileUploadPlaceholder>
                            {isDragOver ? (
                              <FiFile size={32} style={{ color: 'var(--primary-color)' }} />
                            ) : (
                              <FiFileText size={24} />
                            )}
                            <span>
                              {isDragOver 
                                ? 'ÌååÏùºÏùÑ Ïó¨Í∏∞Ïóê ÎÜìÏúºÏÑ∏Ïöî' 
                                : 'Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÌååÏùºÏùÑ ÏÑ†ÌÉùÌïòÍ±∞ÎÇò ÎìúÎûòÍ∑∏ÌïòÏÑ∏Ïöî'
                              }
                            </span>
                            <small>PDF ÌååÏùºÎßå ÏßÄÏõê</small>
                          </FileUploadPlaceholder>
                        )}
                      </FileUploadLabel>
                    </FileUploadArea>
                  </DocumentUploadContainer>
                </ResumeFormSection>

                <ResumeFormActions>
                  <ResumeSubmitButton 
                    onClick={handleResumeSubmit}
                    disabled={(!resumeFile && !coverLetterFile && !portfolioFile) || isAnalyzing}
                  >
                    {isAnalyzing ? 'Ï≤òÎ¶¨ Ï§ë...' : 'ÏóÖÎ°úÎìú Î∞è Ï†ÄÏû•'}
                  </ResumeSubmitButton>
                </ResumeFormActions>
              </ResumeModalBody>

              {isAnalyzing && (
                <ResumeAnalysisSection>
                  <ResumeAnalysisTitle>Î¨∏ÏÑú ÏóÖÎ°úÎìú Î∞è Î∂ÑÏÑù Ï§ëÏûÖÎãàÎã§...</ResumeAnalysisTitle>
                  <ResumeAnalysisSpinner>
                    <div className="spinner"></div>
                    <span>AIÍ∞Ä Î¨∏ÏÑúÎ•º Î∂ÑÏÑùÌïòÍ≥† ÏûàÏäµÎãàÎã§ (ÏµúÎåÄ 5Î∂Ñ ÏÜåÏöî)</span>
                    <small style={{ marginTop: '8px', color: 'var(--text-secondary)' }}>
                      ÎåÄÏö©Îüâ ÌååÏùºÏù¥ÎÇò Ïó¨Îü¨ ÌååÏùºÏùÑ ÎèôÏãúÏóê Ï≤òÎ¶¨Ìï† Îïå ÏãúÍ∞ÑÏù¥ Ïò§Îûò Í±∏Î¶¥ Ïàò ÏûàÏäµÎãàÎã§.
                    </small>
                  </ResumeAnalysisSpinner>
                </ResumeAnalysisSection>
              )}

              {analysisResult && (
                <ResumeAnalysisSection>
                  <ResumeAnalysisTitle>ÏóÖÎ°úÎìú Í≤∞Í≥º</ResumeAnalysisTitle>
                  <ResumeAnalysisContent>
                    <ResumeAnalysisItem>
                      <ResumeAnalysisLabel>Î¨∏ÏÑú Ïú†Ìòï:</ResumeAnalysisLabel>
                      <ResumeAnalysisValue>{analysisResult.documentType}</ResumeAnalysisValue>
                    </ResumeAnalysisItem>
                    <ResumeAnalysisItem>
                      <ResumeAnalysisLabel>ÌååÏùºÎ™Ö:</ResumeAnalysisLabel>
                      <ResumeAnalysisValue>{analysisResult.fileName}</ResumeAnalysisValue>
                    </ResumeAnalysisItem>
                    <ResumeAnalysisItem>
                      <ResumeAnalysisLabel>ÏóÖÎ°úÎìú ÏùºÏãú:</ResumeAnalysisLabel>
                      <ResumeAnalysisValue>{analysisResult.analysisDate}</ResumeAnalysisValue>
                    </ResumeAnalysisItem>
                    {analysisResult.applicant && (
                      <>
                        <ResumeAnalysisItem>
                          <ResumeAnalysisLabel>ÏßÄÏõêÏûê Ïù¥Î¶Ñ:</ResumeAnalysisLabel>
                          <ResumeAnalysisValue>{analysisResult.applicant.name || 'N/A'}</ResumeAnalysisValue>
                        </ResumeAnalysisItem>
                        <ResumeAnalysisItem>
                          <ResumeAnalysisLabel>ÏßÄÏõêÏûê Ïù¥Î©îÏùº:</ResumeAnalysisLabel>
                          <ResumeAnalysisValue>{analysisResult.applicant.email || 'N/A'}</ResumeAnalysisValue>
                        </ResumeAnalysisItem>
                        <ResumeAnalysisItem>
                          <ResumeAnalysisLabel>ÏßÄÏõêÏûê Ï†ÑÌôîÎ≤àÌò∏:</ResumeAnalysisLabel>
                          <ResumeAnalysisValue>{analysisResult.applicant.phone || 'N/A'}</ResumeAnalysisValue>
                        </ResumeAnalysisItem>
                        <ResumeAnalysisItem>
                          <ResumeAnalysisLabel>ÏßÄÏõê ÏßÅÎ¨¥:</ResumeAnalysisLabel>
                          <ResumeAnalysisValue>{analysisResult.applicant.position || 'N/A'}</ResumeAnalysisValue>
                        </ResumeAnalysisItem>
                        <ResumeAnalysisItem>
                          <ResumeAnalysisLabel>Í∏∞Ïà† Ïä§ÌÉù:</ResumeAnalysisLabel>
                          <ResumeAnalysisSkills>
                            {(analysisResult.applicant.skills || '').split(',').map((skill, index) => (
                              <ResumeSkillTag key={index}>{skill.trim()}</ResumeSkillTag>
                            ))}
                          </ResumeAnalysisSkills>
                        </ResumeAnalysisItem>
                      </>
                    )}
                    <ResumeAnalysisItem>
                      <ResumeAnalysisLabel>ÏóÖÎ°úÎìú Í≤∞Í≥º:</ResumeAnalysisLabel>
                      <ResumeAnalysisRecommendations>
                        {analysisResult.uploadResults?.map((result, index) => (
                          <ResumeRecommendationItem key={index}>
                            ‚úÖ {result.type === 'resume' ? 'Ïù¥Î†•ÏÑú' : result.type === 'cover_letter' ? 'ÏûêÍ∏∞ÏÜåÍ∞úÏÑú' : 'Ìè¨Ìä∏Ìè¥Î¶¨Ïò§'} ÏóÖÎ°úÎìú ÏÑ±Í≥µ
                          </ResumeRecommendationItem>
                        ))}
                        {analysisResult.analysisResult && Object.keys(analysisResult.analysisResult).map((docType, index) => (
                          <ResumeRecommendationItem key={`doc-${index}`}>
                            ‚úÖ {docType === 'resume' ? 'Ïù¥Î†•ÏÑú' : docType === 'cover_letter' ? 'ÏûêÍ∏∞ÏÜåÍ∞úÏÑú' : 'Ìè¨Ìä∏Ìè¥Î¶¨Ïò§'} OCR Ï≤òÎ¶¨ ÏôÑÎ£å
                          </ResumeRecommendationItem>
                        ))}
                      </ResumeAnalysisRecommendations>
                    </ResumeAnalysisItem>
                    <ResumeAnalysisItem>
                      <ResumeAnalysisLabel>ÏÉÅÌÉú:</ResumeAnalysisLabel>
                      <ResumeAnalysisValue style={{ color: '#28a745', fontWeight: 'bold' }}>
                        ‚úÖ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú DBÏóê Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§
                      </ResumeAnalysisValue>
                    </ResumeAnalysisItem>
                  </ResumeAnalysisContent>
                </ResumeAnalysisSection>
              )}

              <ResumeModalFooter>
                <ResumeModalButton onClick={handleResumeModalClose}>
                  {analysisResult ? 'Îã´Í∏∞' : 'Ï∑®ÏÜå'}
                </ResumeModalButton>
              </ResumeModalFooter>
            </ResumeModalContent>
          </ResumeModalOverlay>
        )}
      </AnimatePresence>

      {/* ÏÉÅÏÑ∏ Î∂ÑÏÑù Î™®Îã¨ */}
      <DetailedAnalysisModal
        isOpen={showDetailedAnalysis}
        onClose={() => setShowDetailedAnalysis(false)}
        analysisData={{
          ...analysisResult,
          analysisScore: selectedApplicant?.analysisScore
        }}
      />
    </Container>
  );
};

// ÏÉàÎ°úÏö¥ Ïä§ÌÉÄÏùº Ïª¥Ìè¨ÎÑåÌä∏Îì§
const ApplicantInfoContainer = styled.div`
  display: flex;
  flex-direction: column;
  gap: 16px;
  margin-bottom: 24px;
`;

const InfoField = styled.div`
  display: flex;
  flex-direction: column;
  gap: 8px;
`;

const InfoLabel = styled.label`
  font-size: 0.9rem;
  font-weight: 600;
  color: #2d3748;
`;

const InfoInput = styled.input`
  padding: 12px;
  border: 1px solid #e2e8f0;
  border-radius: 8px;
  font-size: 1rem;
  transition: border-color 0.3s ease;

  &:focus {
    outline: none;
    border-color: #4299e1;
    box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.1);
  }

  &::placeholder {
    color: #a0aec0;
  }
`;

const ResumeFormActions = styled.div`
  display: flex;
  justify-content: center;
  margin-top: 24px;
  padding-top: 24px;
  border-top: 1px solid #e2e8f0;
`;

const ResumeSubmitButton = styled.button`
  background-color: #48bb78;
  color: white;
  border: none;
  padding: 14px 28px;
  border-radius: 8px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  min-width: 160px;

  &:hover:not(:disabled) {
    background-color: #38a169;
    transform: translateY(-1px);
  }

  &:disabled {
    background-color: #cbd5e0;
    cursor: not-allowed;
    transform: none;
  }
`;

const DeleteButton = styled.button`
  background-color: #e53e3e;
  color: white;
  border: none;
  padding: 12px 20px;
  border-radius: 8px;
  font-size: 14px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  gap: 8px;
  margin-top: 16px;
  width: 100%;
  justify-content: center;

  &:hover {
    background-color: #c53030;
    transform: translateY(-1px);
  }

  &:active {
    transform: translateY(0);
  }
`;

// Ïú†ÏÇ¨ Ïù∏Ïû¨ Ï∂îÏ≤ú Ïä§ÌÉÄÏùº Ïª¥Ìè¨ÎÑåÌä∏Îì§
const SimilarCandidatesSection = styled.div`
  margin: 24px 0;
  padding: 20px;
  background: #f8fafc;
  border-radius: 12px;
  border: 1px solid #e2e8f0;
`;

const SimilarCandidatesTitle = styled.h3`
  display: flex;
  align-items: center;
  gap: 8px;
  margin: 0 0 16px 0;
  font-size: 1.1rem;
  font-weight: 600;
  color: #2d3748;
`;

const SimilarCandidatesButton = styled.button`
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 12px 20px;
  background: #4299e1;
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 0.9rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
  margin-bottom: 16px;

  &:hover {
    background: #3182ce;
    transform: translateY(-1px);
  }

  &:active {
    transform: translateY(0);
  }
`;

const SimilarCandidatesLoading = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 40px 20px;
  color: #718096;
  font-size: 0.9rem;
  gap: 16px;
`;

const SimilarCandidatesSpinner = styled.div`
  width: 32px;
  height: 32px;
  border: 3px solid #e2e8f0;
  border-top: 3px solid #4299e1;
  border-radius: 50%;
  animation: spin 1s linear infinite;

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
`;

const SimilarCandidatesList = styled.div`
  display: flex;
  flex-direction: column;
  gap: 12px;
`;

const SimilarCandidateItem = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 16px;
  background: white;
  border-radius: 8px;
  border: 1px solid #e2e8f0;
  transition: all 0.3s ease;

  &:hover {
    border-color: #4299e1;
    box-shadow: 0 2px 8px rgba(66, 153, 225, 0.1);
  }
`;

const SimilarCandidateInfo = styled.div`
  flex: 1;
`;

const SimilarCandidateName = styled.div`
  font-weight: 600;
  color: #2d3748;
  margin-bottom: 4px;
`;

const SimilarCandidateDetails = styled.div`
  font-size: 0.9rem;
  color: #718096;
  margin-bottom: 4px;
`;

const SimilarCandidateScore = styled.div`
  font-size: 0.8rem;
  color: #4299e1;
  font-weight: 500;
`;

const SimilarCandidateScoreDetail = styled.div`
  font-size: 0.7rem;
  color: #718096;
  font-weight: 400;
  margin-top: 2px;
`;

const SimilarCandidateMethod = styled.div`
  font-size: 0.7rem;
  color: #38a169;
  margin-top: 4px;
  font-style: italic;
`;

const SimilarCandidateActions = styled.div`
  display: flex;
  gap: 8px;
`;

const SimilarCandidateButton = styled.button`
  padding: 8px 16px;
  background: #f7fafc;
  color: #4299e1;
  border: 1px solid #4299e1;
  border-radius: 6px;
  font-size: 0.8rem;
  cursor: pointer;
  transition: all 0.3s ease;

  &:hover {
    background: #4299e1;
    color: white;
  }
`;

const SimilarCandidatesError = styled.div`
  text-align: center;
  padding: 20px;
  color: #e53e3e;
  background: #fed7d7;
  border-radius: 8px;
  font-size: 0.9rem;
`;

const SimilarCandidatesEmpty = styled.div`
  text-align: center;
  padding: 20px;
  color: #718096;
  font-style: italic;
`;

export default ApplicantManagement; 
